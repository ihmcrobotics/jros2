/*
 * This class was automatically generated by jros2
 */
package <context.javaPackageName>;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

<!
Template for generating ROS2Message types

Template inputs:
   context: us.ihmc.jros2.generator.context.MsgContext

Template syntax: https://github.com/antlr/stringtemplate4/blob/master/doc/cheatsheet.md
!>
<if(context.headerComment)>/**
   <context.headerComment>
*/
<endif>
public class <context.name> implements ROS2Message\<<context.name>>
{
   public static final java.lang.String name = "<context.packageName>::msg::dds_::<context.name>_";

   <context.fields:{ field |
<if(field.headerComment)>/**
   <field.headerComment>
*/
<endif>
<if(field.constantValue)>public static final<else>private<if((!field.builtinType||field.builtinStringType)||field.array)> final<endif><endif> <field.javaType><if(field.array&&field.fixedSize)>[]<endif> <field.javaName><if(field.constantValue)> = <field.constantValue><endif>;
   }>
   public <context.name>()
   {
      <context.fields:{ field |
      <if(field.array)>
<field.javaName> = new <field.javaType><if(field.fixedSize)>[<field.length>]<else>(<if(field.objectSequence)><field.objectSequenceTypeClass><endif>)<endif>;
      <elseif(!field.builtinType||field.builtinStringType)>
<field.javaName> = new <field.javaType>();
      <endif>
      }>
   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      <context.fields:{ field |
      <if(!field.constantValue)>
      <if(field.builtinType)>
      <if(field.array&&field.fixedSize)>
currentAlignment += (<field.length> * <field.builtinTypeSize>) + CDRBuffer.alignment(currentAlignment, (<field.length> * <field.builtinTypeSize>)); // <field.javaName>
      <elseif(field.array&&!field.fixedSize)>
currentAlignment += <field.javaName>.calculateSizeBytes(currentAlignment);
      <elseif(!field.array&&field.builtinStringType)>
currentAlignment += (<field.builtinTypeSize> * <field.javaName>.length()) + CDRBuffer.alignment(currentAlignment, (<field.builtinTypeSize> * <field.javaName>.length())); // <field.javaName>
      <elseif(!field.array)>
currentAlignment += <field.builtinTypeSize> + CDRBuffer.alignment(currentAlignment, <field.builtinTypeSize>); // <field.javaName>
      <endif>
      <else>
currentAlignment += <field.javaName>.calculateSizeBytes(currentAlignment);
      <endif>
      <endif>
      }>
      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      <context.fields:{ field |
      <if(!field.constantValue)>
      <if(field.builtinType)>
      <if(field.array&&field.fixedSize)>
<! TODO: direct array to buffer copy instead of iterating !>
for (int i = 0; i \< <field.javaName>.length; ++i)
{
   buffer.<field.builtinCDRBufferWriteMethod>(<field.javaName>[i]);
\}
      <elseif(field.array&&!field.fixedSize)>
<field.javaName>.serialize(buffer);
      <elseif(!field.array)>
buffer.<field.builtinCDRBufferWriteMethod>(<field.javaName>);
      <endif>
      <else>
<field.javaName>.serialize(buffer);
      <endif>
      <endif>
      }>
   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      <context.fields:{ field |
      <if(!field.constantValue)>
      <if(field.builtinType)>
      <if(field.array&&field.fixedSize)>
<! TODO: direct buffer to array copy instead of iterating !>
for (int i = 0; i \< <field.javaName>.length; ++i)
{
      <if(field.builtinStringType)>
buffer.<field.builtinCDRBufferReadMethod>(<field.javaName>[i]);
      <else>
<field.javaName>[i] = buffer.<field.builtinCDRBufferReadMethod>();
      <endif>
\}
      <elseif(field.array&&!field.fixedSize)>
<field.javaName>.deserialize(buffer);
      <elseif(!field.array)>
      <if(field.builtinStringType)>
buffer.<field.builtinCDRBufferReadMethod>(<field.javaName>);
      <else>
<field.javaName> = buffer.<field.builtinCDRBufferReadMethod>();
      <endif>
      <endif>
      <else>
<field.javaName>.deserialize(buffer);
      <endif>
      <endif>
      }>
   }

   @Override
   public void set(<context.name> from)
   {
      <context.fields:{ field |
      <if(!field.constantValue)>
      <if(field.builtinType)>
      <if(field.array&&field.fixedSize)>
<! TODO: Use more efficient array copy !>
for (int i = 0; i \< <field.javaName>.length; ++i)
{
   <field.javaName>[i] = from.<field.javaName>[i];
\}
      <elseif(field.sequence)>
<field.javaName>.set(from.<field.javaName>);
      <elseif(!field.array&&field.builtinStringType)>
<field.javaName>.delete(0, <field.javaName>.length());
<field.javaName>.insert(0, from.<field.javaName>);
      <elseif(!field.array)>
<field.javaName> = from.<field.javaName>;
      <endif>
      <else>
<field.javaName>.set(from.<field.javaName>);
      <endif>
      <endif>
      }>
   }

<! Getters and setters start !>
   <context.fields: { field |
<if(!field.constantValue)>
public <field.javaType><if(field.array&&field.fixedSize)>[]<endif> get<field.name>()
{
   return <field.javaName>;
\}

<if(field.builtinType&&!field.builtinStringType&&!field.array)>
public void set<field.name>(<field.javaType> <field.javaName>)
{
   this.<field.javaName> = <field.javaName>;
\}

<endif>
<endif>
   }>
<! Getters and setters end !>
}