/*
 * This class was automatically generated by jros2
 */
package rcl_interfaces.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
*/
public class Log implements ROS2Message<Log>
{
   public static final java.lang.String name = "rcl_interfaces::msg::dds_::Log_";

   /**
      Corresponding log level, see above definitions.
   */
   private byte level_;
   /**
      The name representing the logger this message came from.
   */
   private StringBuilder name_;
   /**
      The full log message.
   */
   private StringBuilder msg_;
   /**
      The file the message came from.
   */
   private StringBuilder file_;
   /**
      The function the message came from.
   */
   private StringBuilder function_;
   /**
      The line in the file the message came from.
   */
   private int line_;

   public Log()
   {
   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // level_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // name_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // msg_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // file_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // function_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // line_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeByte(level_);
      buffer.writeString(name_);
      buffer.writeString(msg_);
      buffer.writeString(file_);
      buffer.writeString(function_);
      buffer.writeInt(line_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      level_ = buffer.readByte();
      buffer.readString(name_);
      buffer.readString(msg_);
      buffer.readString(file_);
      buffer.readString(function_);
      line_ = buffer.readInt();

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(Log from)
   {
      level_ = from.level_;
      name_ = from.name_;
      msg_ = from.msg_;
      file_ = from.file_;
      function_ = from.function_;
      line_ = from.line_;

   }

   public byte getlevel()
   {
      return level_;
   }

   public void setlevel(byte level_)
   {
      this.level_ = level_;
   }

   public StringBuilder getname()
   {
      return name_;
   }

   public void setname(StringBuilder name_)
   {
      this.name_ = name_;
   }

   public StringBuilder getmsg()
   {
      return msg_;
   }

   public void setmsg(StringBuilder msg_)
   {
      this.msg_ = msg_;
   }

   public StringBuilder getfile()
   {
      return file_;
   }

   public void setfile(StringBuilder file_)
   {
      this.file_ = file_;
   }

   public StringBuilder getfunction()
   {
      return function_;
   }

   public void setfunction(StringBuilder function_)
   {
      this.function_ = function_;
   }

   public int getline()
   {
      return line_;
   }

   public void setline(int line_)
   {
      this.line_ = line_;
   }


}