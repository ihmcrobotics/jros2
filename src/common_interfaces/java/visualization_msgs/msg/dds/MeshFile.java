/*
 * This class was automatically generated by jros2
 */
package visualization_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
    Used to send raw mesh files.
*/
public class MeshFile implements ROS2Message<MeshFile>
{
   public static final String name = "visualization_msgs::msg::dds_::MeshFile_";

   /**
       The filename is used for both debug purposes and to provide a file extension
       for whatever parser is used.
   */
   private StringBuilder filename_;
   /**
       This stores the raw text of the mesh file.
   */
   private IDLByteSequence data_;

   public MeshFile()
   {
      data_ = new IDLByteSequence();

   }

   public StringBuilder getfilename()
   {
      return filename_;
   }

   public void setfilename(StringBuilder filename_)
   {
      this.filename_ = filename_;
   }

   public IDLByteSequence getdata()
   {
      return data_;
   }


   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // filename_
      currentAlignment += data_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.(filename_);
      data_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      filename_ = buffer.();
      data_.deserialize(buffer);

   }

   @Override
   public String getName()
   {
      return name;
   }

   @Override
   public void set(MeshFile from)
   {
      filename_ = from.filename_;
      data_.set(from.data_);

   }
}