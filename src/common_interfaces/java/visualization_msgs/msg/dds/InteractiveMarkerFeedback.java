/*
 * This class was automatically generated by jros2
 */
package visualization_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
*/
public class InteractiveMarkerFeedback implements ROS2Message<InteractiveMarkerFeedback>
{
   public static final java.lang.String name = "visualization_msgs::msg::dds_::InteractiveMarkerFeedback_";

   /**
      Identifying string. Must be unique in the topic namespace.
   */
   private StringBuilder client_id_;
   /**
      Specifies which interactive marker and control this message refers to
   */
   private StringBuilder marker_name_;
   private StringBuilder control_name_;
   private byte event_type_;
   /**
      Contains the ID of the selected menu entry
      Only valid for MENU_SELECT events.
   */
   private int menu_entry_id_;
   private boolean mouse_point_valid_;

   public InteractiveMarkerFeedback()
   {
   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // client_id_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // marker_name_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // control_name_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // event_type_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // menu_entry_id_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // mouse_point_valid_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeString(client_id_);
      buffer.writeString(marker_name_);
      buffer.writeString(control_name_);
      buffer.writeByte(event_type_);
      buffer.writeInt(menu_entry_id_);
      buffer.writeBoolean(mouse_point_valid_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      buffer.readString(client_id_);
      buffer.readString(marker_name_);
      buffer.readString(control_name_);
      event_type_ = buffer.readByte();
      menu_entry_id_ = buffer.readInt();
      mouse_point_valid_ = buffer.readBoolean();

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(InteractiveMarkerFeedback from)
   {
      client_id_ = from.client_id_;
      marker_name_ = from.marker_name_;
      control_name_ = from.control_name_;
      event_type_ = from.event_type_;
      menu_entry_id_ = from.menu_entry_id_;
      mouse_point_valid_ = from.mouse_point_valid_;

   }

   public StringBuilder getclient_id()
   {
      return client_id_;
   }

   public void setclient_id(StringBuilder client_id_)
   {
      this.client_id_ = client_id_;
   }

   public StringBuilder getmarker_name()
   {
      return marker_name_;
   }

   public void setmarker_name(StringBuilder marker_name_)
   {
      this.marker_name_ = marker_name_;
   }

   public StringBuilder getcontrol_name()
   {
      return control_name_;
   }

   public void setcontrol_name(StringBuilder control_name_)
   {
      this.control_name_ = control_name_;
   }

   public byte getevent_type()
   {
      return event_type_;
   }

   public void setevent_type(byte event_type_)
   {
      this.event_type_ = event_type_;
   }

   public int getmenu_entry_id()
   {
      return menu_entry_id_;
   }

   public void setmenu_entry_id(int menu_entry_id_)
   {
      this.menu_entry_id_ = menu_entry_id_;
   }

   public boolean getmouse_point_valid()
   {
      return mouse_point_valid_;
   }

   public void setmouse_point_valid(boolean mouse_point_valid_)
   {
      this.mouse_point_valid_ = mouse_point_valid_;
   }


}