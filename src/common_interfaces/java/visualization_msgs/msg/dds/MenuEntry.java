/*
 * This class was automatically generated by jros2
 */
package visualization_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   MenuEntry message.

   Each InteractiveMarker message has an array of MenuEntry messages.
   A collection of MenuEntries together describe a
   menu/submenu/subsubmenu/etc tree, though they are stored in a flat
   array.  The tree structure is represented by giving each menu entry
   an ID number and a "parent_id" field.  Top-level entries are the
   ones with parent_id = 0.  Menu entries are ordered within their
   level the same way they are ordered in the containing array.  Parent
   entries must appear before their children.

   Example:
   - id = 3
   parent_id = 0
   title = "fun"
   - id = 2
   parent_id = 0
   title = "robot"
   - id = 4
   parent_id = 2
   title = "pr2"
   - id = 5
   parent_id = 2
   title = "turtle"

   Gives a menu tree like this:
   - fun
   - robot
   - pr2
   - turtle
*/
public class MenuEntry implements ROS2Message<MenuEntry>
{
   public static final java.lang.String name = "visualization_msgs::msg::dds_::MenuEntry_";

   /**
      ID is a number for each menu entry.  Must be unique within the
      control, and should never be 0.
   */
   private int id_;
   /**
      ID of the parent of this menu entry, if it is a submenu.  If this
      menu entry is a top-level entry, set parent_id to 0.
   */
   private int parent_id_;
   /**
      menu / entry title
   */
   private StringBuilder title_;
   /**
      Arguments to command indicated by command_type (below)
   */
   private StringBuilder command_;
   private byte command_type_;

   public MenuEntry()
   {
      title_ = new StringBuilder();
      command_ = new StringBuilder();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // id_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // parent_id_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // title_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // command_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // command_type_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeInt(id_);
      buffer.writeInt(parent_id_);
      buffer.writeString(title_);
      buffer.writeString(command_);
      buffer.writeByte(command_type_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      id_ = buffer.readInt();
      parent_id_ = buffer.readInt();
      buffer.readString(title_);
      buffer.readString(command_);
      command_type_ = buffer.readByte();

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(MenuEntry from)
   {
      id_ = from.id_;
      parent_id_ = from.parent_id_;
      title_ = from.title_;
      command_ = from.command_;
      command_type_ = from.command_type_;

   }

   public int getid()
   {
      return id_;
   }

   public void setid(int id_)
   {
      this.id_ = id_;
   }

   public int getparent_id()
   {
      return parent_id_;
   }

   public void setparent_id(int parent_id_)
   {
      this.parent_id_ = parent_id_;
   }

   public StringBuilder gettitle()
   {
      return title_;
   }

   public void settitle(StringBuilder title_)
   {
      this.title_ = title_;
   }

   public StringBuilder getcommand()
   {
      return command_;
   }

   public void setcommand(StringBuilder command_)
   {
      this.command_ = command_;
   }

   public byte getcommand_type()
   {
      return command_type_;
   }

   public void setcommand_type(byte command_type_)
   {
      this.command_type_ = command_type_;
   }


}