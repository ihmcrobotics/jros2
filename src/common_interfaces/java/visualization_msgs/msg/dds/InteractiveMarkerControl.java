/*
 * This class was automatically generated by jros2
 */
package visualization_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
    Represents a control that is to be displayed together with an interactive marker
*/
public class InteractiveMarkerControl implements ROS2Message<InteractiveMarkerControl>
{
   public static final String name = "visualization_msgs::msg::dds_::InteractiveMarkerControl_";

   /**
       Identifying string for this control.
       You need to assign a unique value to this to receive feedback from the GUI
       on what actions the user performs on this control (e.g. a button click).
   */
   private StringBuilder name_;
   private byte orientation_mode_;
   private byte interaction_mode_;
   /**
       If true, the contained markers will also be visible
       when the gui is not in interactive mode.
   */
   private boolean always_visible_;
   /**
       Markers to be displayed as custom visual representation.
       Leave this empty to use the default control handles.

       Note:
       - The markers can be defined in an arbitrary coordinate frame,
         but will be transformed into the local frame of the interactive marker.
       - If the header of a marker is empty, its pose will be interpreted as
         relative to the pose of the parent interactive marker.
   */
   private visualization_msgs.msg.dds.Marker markers_;
   /**
       In VIEW_FACING mode, set this to true if you don't want the markers
       to be aligned with the camera view point. The markers will show up
       as in INHERIT mode.
   */
   private boolean independent_marker_orientation_;
   /**
       Short description (< 40 characters) of what this control does,
       e.g. "Move the robot".
       Default: A generic description based on the interaction mode
   */
   private StringBuilder description_;

   public InteractiveMarkerControl()
   {
      markers_ = new visualization_msgs.msg.dds.Marker();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // name_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // orientation_mode_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // interaction_mode_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // always_visible_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // independent_marker_orientation_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // description_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeString(name_);
      buffer.writeByte(orientation_mode_);
      buffer.writeByte(interaction_mode_);
      buffer.writeBoolean(always_visible_);
      buffer.writeBoolean(independent_marker_orientation_);
      buffer.writeString(description_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      buffer.readString(name_);
      orientation_mode_ = buffer.readByte();
      interaction_mode_ = buffer.readByte();
      always_visible_ = buffer.readBoolean();
      independent_marker_orientation_ = buffer.readBoolean();
      buffer.readString(description_);

   }

   @Override
   public String getName()
   {
      return name;
   }

   @Override
   public void set(InteractiveMarkerControl from)
   {
      name_ = from.name_;
      orientation_mode_ = from.orientation_mode_;
      interaction_mode_ = from.interaction_mode_;
      always_visible_ = from.always_visible_;
      independent_marker_orientation_ = from.independent_marker_orientation_;
      description_ = from.description_;

   }

   public StringBuilder getname()
   {
      return name_;
   }

   public void setname(StringBuilder name_)
   {
      this.name_ = name_;
   }

   public byte getorientation_mode()
   {
      return orientation_mode_;
   }

   public void setorientation_mode(byte orientation_mode_)
   {
      this.orientation_mode_ = orientation_mode_;
   }

   public byte getinteraction_mode()
   {
      return interaction_mode_;
   }

   public void setinteraction_mode(byte interaction_mode_)
   {
      this.interaction_mode_ = interaction_mode_;
   }

   public boolean getalways_visible()
   {
      return always_visible_;
   }

   public void setalways_visible(boolean always_visible_)
   {
      this.always_visible_ = always_visible_;
   }

   public visualization_msgs.msg.dds.Marker getmarkers()
   {
      return markers_;
   }

   public boolean getindependent_marker_orientation()
   {
      return independent_marker_orientation_;
   }

   public void setindependent_marker_orientation(boolean independent_marker_orientation_)
   {
      this.independent_marker_orientation_ = independent_marker_orientation_;
   }

   public StringBuilder getdescription()
   {
      return description_;
   }

   public void setdescription(StringBuilder description_)
   {
      this.description_ = description_;
   }


}