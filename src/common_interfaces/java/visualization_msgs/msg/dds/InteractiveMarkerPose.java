/*
 * This class was automatically generated by jros2
 */
package visualization_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
*/
public class InteractiveMarkerPose implements ROS2Message<InteractiveMarkerPose>
{
   public static final java.lang.String name = "visualization_msgs::msg::dds_::InteractiveMarkerPose_";

   /**
      Time/frame info.
   */
   private std_msgs.msg.dds.Header header_;
   /**
      Initial pose. Also, defines the pivot point for rotations.
   */
   private geometry_msgs.msg.dds.Pose pose_;
   /**
      Identifying string. Must be globally unique in
      the topic that this message is sent through.
   */
   private StringBuilder name_;

   public InteractiveMarkerPose()
   {
      header_ = new std_msgs.msg.dds.Header();
      pose_ = new geometry_msgs.msg.dds.Pose();
      name_ = new StringBuilder();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // name_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeString(name_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      buffer.readString(name_);

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(InteractiveMarkerPose from)
   {
      name_ = from.name_;

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public geometry_msgs.msg.dds.Pose getpose()
   {
      return pose_;
   }

   public StringBuilder getname()
   {
      return name_;
   }

   public void setname(StringBuilder name_)
   {
      this.name_ = name_;
   }


}