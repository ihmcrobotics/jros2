/*
 * This class was automatically generated by jros2
 */
package rcl_interfaces.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This is the message to communicate a parameter's descriptor.
*/
public class ParameterDescriptor implements ROS2Message<ParameterDescriptor>
{
   public static final java.lang.String name = "rcl_interfaces::msg::dds_::ParameterDescriptor_";

   /**
      The name of the parameter.
   */
   private StringBuilder name_;
   /**
      Enum values are defined in the `ParameterType.msg` message.
   */
   private byte type_;
   /**
      Description of the parameter, visible from introspection tools.
   */
   private StringBuilder description_;
   /**
      Plain English description of additional constraints which cannot be expressed
      with the available constraints, e.g. "only prime numbers".

      By convention, this should only be used to clarify constraints which cannot
      be completely expressed with the parameter constraints below.
   */
   private StringBuilder additional_constraints_;
   /**
      If 'true' then the value cannot change after it has been initialized.
   */
   private boolean read_only_;
   /**
      If true, the parameter is allowed to change type.
   */
   private boolean dynamic_typing_;
   /**
      FloatingPointRange consists of a from_value, a to_value, and a step.
   */
   private rcl_interfaces.msg.dds.FloatingPointRange floating_point_range_;
   /**
      IntegerRange consists of a from_value, a to_value, and a step.
   */
   private rcl_interfaces.msg.dds.IntegerRange integer_range_;

   public ParameterDescriptor()
   {
      name_ = new StringBuilder();
      description_ = new StringBuilder();
      additional_constraints_ = new StringBuilder();
      floating_point_range_ = new rcl_interfaces.msg.dds.FloatingPointRange();
      integer_range_ = new rcl_interfaces.msg.dds.IntegerRange();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // name_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // type_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // description_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // additional_constraints_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // read_only_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // dynamic_typing_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeString(name_);
      buffer.writeByte(type_);
      buffer.writeString(description_);
      buffer.writeString(additional_constraints_);
      buffer.writeBoolean(read_only_);
      buffer.writeBoolean(dynamic_typing_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      buffer.readString(name_);
      type_ = buffer.readByte();
      buffer.readString(description_);
      buffer.readString(additional_constraints_);
      read_only_ = buffer.readBoolean();
      dynamic_typing_ = buffer.readBoolean();

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(ParameterDescriptor from)
   {
      name_ = from.name_;
      type_ = from.type_;
      description_ = from.description_;
      additional_constraints_ = from.additional_constraints_;
      read_only_ = from.read_only_;
      dynamic_typing_ = from.dynamic_typing_;

   }

   public StringBuilder getname()
   {
      return name_;
   }

   public void setname(StringBuilder name_)
   {
      this.name_ = name_;
   }

   public byte gettype()
   {
      return type_;
   }

   public void settype(byte type_)
   {
      this.type_ = type_;
   }

   public StringBuilder getdescription()
   {
      return description_;
   }

   public void setdescription(StringBuilder description_)
   {
      this.description_ = description_;
   }

   public StringBuilder getadditional_constraints()
   {
      return additional_constraints_;
   }

   public void setadditional_constraints(StringBuilder additional_constraints_)
   {
      this.additional_constraints_ = additional_constraints_;
   }

   public boolean getread_only()
   {
      return read_only_;
   }

   public void setread_only(boolean read_only_)
   {
      this.read_only_ = read_only_;
   }

   public boolean getdynamic_typing()
   {
      return dynamic_typing_;
   }

   public void setdynamic_typing(boolean dynamic_typing_)
   {
      this.dynamic_typing_ = dynamic_typing_;
   }

   public rcl_interfaces.msg.dds.FloatingPointRange getfloating_point_range()
   {
      return floating_point_range_;
   }

   public rcl_interfaces.msg.dds.IntegerRange getinteger_range()
   {
      return integer_range_;
   }


}