/*
 * This class was automatically generated by jros2
 */
package std_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   Standard metadata for higher-level stamped data types.
   This is generally used to communicate timestamped data
   in a particular coordinate frame.
*/
public class Header implements ROS2Message<Header>
{
   public static final java.lang.String name = "std_msgs::msg::dds_::Header_";

   /**
      Two-integer timestamp that is expressed as seconds and nanoseconds.
   */
   private std_msgs.msg.dds.builtin_interfaces/Time stamp_;
   /**
      Transform frame with which this data is associated.
   */
   private StringBuilder frame_id_;

   public Header()
   {
   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // frame_id_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeString(frame_id_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      buffer.readString(frame_id_);

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(Header from)
   {
      frame_id_ = from.frame_id_;

   }

   public std_msgs.msg.dds.builtin_interfaces/Time getstamp()
   {
      return stamp_;
   }

   public StringBuilder getframe_id()
   {
      return frame_id_;
   }

   public void setframe_id(StringBuilder frame_id_)
   {
      this.frame_id_ = frame_id_;
   }


}