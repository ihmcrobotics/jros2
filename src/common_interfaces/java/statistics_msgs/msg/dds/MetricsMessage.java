/*
 * This class was automatically generated by jros2
 */
package statistics_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   ############################################
   A generic metrics message providing statistics for measurements from different sources. For example,
   measure a system's CPU % for a given window yields the following data points over a window of time:

   - average cpu %
   - std deviation
   - min
   - max
   - sample count

   These are all represented as different 'StatisticDataPoint's.
   ############################################
*/
public class MetricsMessage implements ROS2Message<MetricsMessage>
{
   public static final java.lang.String name = "statistics_msgs::msg::dds_::MetricsMessage_";

   /**
      Name metric measurement source, e.g., node, topic, or process name
   */
   private StringBuilder measurement_source_name_;
   /**
      Name of the metric being measured, e.g. cpu_percentage, free_memory_mb, message_age, etc.
   */
   private StringBuilder metrics_source_;
   /**
      Unit of measure of the metric, e.g. percent, mb, seconds, etc.
   */
   private StringBuilder unit_;
   /**
      Measurement window start time
   */
   private builtin_interfaces.msg.dds.Time window_start_;
   /**
      Measurement window end time
   */
   private builtin_interfaces.msg.dds.Time window_stop_;
   /**
      A list of statistics data point, defined in StatisticDataPoint.msg
   */
   private statistics_msgs.msg.dds.StatisticDataPoint statistics_;

   public MetricsMessage()
   {
      statistics_ = new statistics_msgs.msg.dds.StatisticDataPoint();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // measurement_source_name_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // metrics_source_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // unit_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeString(measurement_source_name_);
      buffer.writeString(metrics_source_);
      buffer.writeString(unit_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      buffer.readString(measurement_source_name_);
      buffer.readString(metrics_source_);
      buffer.readString(unit_);

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(MetricsMessage from)
   {
      measurement_source_name_ = from.measurement_source_name_;
      metrics_source_ = from.metrics_source_;
      unit_ = from.unit_;

   }

   public StringBuilder getmeasurement_source_name()
   {
      return measurement_source_name_;
   }

   public void setmeasurement_source_name(StringBuilder measurement_source_name_)
   {
      this.measurement_source_name_ = measurement_source_name_;
   }

   public StringBuilder getmetrics_source()
   {
      return metrics_source_;
   }

   public void setmetrics_source(StringBuilder metrics_source_)
   {
      this.metrics_source_ = metrics_source_;
   }

   public StringBuilder getunit()
   {
      return unit_;
   }

   public void setunit(StringBuilder unit_)
   {
      this.unit_ = unit_;
   }

   public builtin_interfaces.msg.dds.Time getwindow_start()
   {
      return window_start_;
   }

   public builtin_interfaces.msg.dds.Time getwindow_stop()
   {
      return window_stop_;
   }

   public statistics_msgs.msg.dds.StatisticDataPoint getstatistics()
   {
      return statistics_;
   }


}