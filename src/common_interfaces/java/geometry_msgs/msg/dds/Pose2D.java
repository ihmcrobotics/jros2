/*
 * This class was automatically generated by jros2
 */
package geometry_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
    If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.# This expresses a position and orientation on a 2D manifold.
*/
public class Pose2D implements ROS2Message<Pose2D>
{
   public static final String name = "geometry_msgs::msg::dds_::Pose2D_";

   private double x_;
   private double y_;
   private double theta_;

   public Pose2D()
   {
   }

   public double getx()
   {
      return x_;
   }

   public void setx(double x_)
   {
      this.x_ = x_;
   }

   public double gety()
   {
      return y_;
   }

   public void sety(double y_)
   {
      this.y_ = y_;
   }

   public double gettheta()
   {
      return theta_;
   }

   public void settheta(double theta_)
   {
      this.theta_ = theta_;
   }


   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // x_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // y_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // theta_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeDouble(x_);
      buffer.writeDouble(y_);
      buffer.writeDouble(theta_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      x_ = buffer.readDouble();
      y_ = buffer.readDouble();
      theta_ = buffer.readDouble();

   }

   @Override
   public String getName()
   {
      return name;
   }

   @Override
   public void set(Pose2D from)
   {
      x_ = from.x_;
      y_ = from.y_;
      theta_ = from.theta_;

   }
}