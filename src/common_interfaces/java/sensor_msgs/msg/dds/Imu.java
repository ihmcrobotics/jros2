/*
 * This class was automatically generated by jros2
 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
*/
public class Imu implements ROS2Message<Imu>
{
   public static final String name = "sensor_msgs::msg::dds_::Imu_";

   private double[] orientation_covariance_;
   private double[] angular_velocity_covariance_;
   private double[] linear_acceleration_covariance_;

   public Imu()
   {
      orientation_covariance_ = new double[9];
      angular_velocity_covariance_ = new double[9];
      linear_acceleration_covariance_ = new double[9];

   }

   public double[] getorientation_covariance()
   {
      return orientation_covariance_;
   }

   public double[] getangular_velocity_covariance()
   {
      return angular_velocity_covariance_;
   }

   public double[] getlinear_acceleration_covariance()
   {
      return linear_acceleration_covariance_;
   }


   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += (9 * 8) + CDRBuffer.alignment(currentAlignment, (9 * 8)); // orientation_covariance_
      currentAlignment += (9 * 8) + CDRBuffer.alignment(currentAlignment, (9 * 8)); // angular_velocity_covariance_
      currentAlignment += (9 * 8) + CDRBuffer.alignment(currentAlignment, (9 * 8)); // linear_acceleration_covariance_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      for (int i = 0; i < orientation_covariance_.length; ++i)
      {
         buffer.writeDouble(orientation_covariance_[i]);
      }
      for (int i = 0; i < angular_velocity_covariance_.length; ++i)
      {
         buffer.writeDouble(angular_velocity_covariance_[i]);
      }
      for (int i = 0; i < linear_acceleration_covariance_.length; ++i)
      {
         buffer.writeDouble(linear_acceleration_covariance_[i]);
      }

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      for (int i = 0; i < orientation_covariance_.length; ++i)
      {
         orientation_covariance_[i] = buffer.readDouble();
      }
      for (int i = 0; i < angular_velocity_covariance_.length; ++i)
      {
         angular_velocity_covariance_[i] = buffer.readDouble();
      }
      for (int i = 0; i < linear_acceleration_covariance_.length; ++i)
      {
         linear_acceleration_covariance_[i] = buffer.readDouble();
      }

   }

   @Override
   public String getName()
   {
      return name;
   }

   @Override
   public void set(Imu from)
   {
      for (int i = 0; i < orientation_covariance_.length; ++i)
      {
         orientation_covariance_[i] = from.orientation_covariance_[i];
      }
      for (int i = 0; i < angular_velocity_covariance_.length; ++i)
      {
         angular_velocity_covariance_[i] = from.angular_velocity_covariance_[i];
      }
      for (int i = 0; i < linear_acceleration_covariance_.length; ++i)
      {
         linear_acceleration_covariance_[i] = from.linear_acceleration_covariance_[i];
      }

   }
}