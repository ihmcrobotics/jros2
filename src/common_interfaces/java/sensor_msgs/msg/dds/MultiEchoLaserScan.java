/*
 * This class was automatically generated by jros2
 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
    the first ray in the scan.

    in frame frame_id, angles are measured around
    the positive Z axis (counterclockwise, if Z is up)
    with zero angle being forward along the x axis
*/
public class MultiEchoLaserScan implements ROS2Message<MultiEchoLaserScan>
{
   public static final String name = "sensor_msgs::msg::dds_::MultiEchoLaserScan_";

   private float angle_min_;
   private float angle_max_;
   private float angle_increment_;
   private float time_increment_;
   /**
       is moving, this will be used in interpolating position
       of 3d points
   */
   private float scan_time_;
   private float range_min_;
   private float range_max_;
   private sensor_msgs.msg.dds.LaserEcho ranges_;
   /**
       (Note: NaNs, values < range_min or > range_max should be discarded)
       +Inf measurements are out of range
       -Inf measurements are too close to determine exact distance.
   */
   private sensor_msgs.msg.dds.LaserEcho intensities_;

   public MultiEchoLaserScan()
   {
      ranges_ = new sensor_msgs.msg.dds.LaserEcho();
      intensities_ = new sensor_msgs.msg.dds.LaserEcho();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // angle_min_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // angle_max_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // angle_increment_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // time_increment_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // scan_time_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // range_min_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // range_max_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeFloat(angle_min_);
      buffer.writeFloat(angle_max_);
      buffer.writeFloat(angle_increment_);
      buffer.writeFloat(time_increment_);
      buffer.writeFloat(scan_time_);
      buffer.writeFloat(range_min_);
      buffer.writeFloat(range_max_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      angle_min_ = buffer.readFloat();
      angle_max_ = buffer.readFloat();
      angle_increment_ = buffer.readFloat();
      time_increment_ = buffer.readFloat();
      scan_time_ = buffer.readFloat();
      range_min_ = buffer.readFloat();
      range_max_ = buffer.readFloat();

   }

   @Override
   public String getName()
   {
      return name;
   }

   @Override
   public void set(MultiEchoLaserScan from)
   {
      angle_min_ = from.angle_min_;
      angle_max_ = from.angle_max_;
      angle_increment_ = from.angle_increment_;
      time_increment_ = from.time_increment_;
      scan_time_ = from.scan_time_;
      range_min_ = from.range_min_;
      range_max_ = from.range_max_;

   }

   public float getangle_min()
   {
      return angle_min_;
   }

   public void setangle_min(float angle_min_)
   {
      this.angle_min_ = angle_min_;
   }

   public float getangle_max()
   {
      return angle_max_;
   }

   public void setangle_max(float angle_max_)
   {
      this.angle_max_ = angle_max_;
   }

   public float getangle_increment()
   {
      return angle_increment_;
   }

   public void setangle_increment(float angle_increment_)
   {
      this.angle_increment_ = angle_increment_;
   }

   public float gettime_increment()
   {
      return time_increment_;
   }

   public void settime_increment(float time_increment_)
   {
      this.time_increment_ = time_increment_;
   }

   public float getscan_time()
   {
      return scan_time_;
   }

   public void setscan_time(float scan_time_)
   {
      this.scan_time_ = scan_time_;
   }

   public float getrange_min()
   {
      return range_min_;
   }

   public void setrange_min(float range_min_)
   {
      this.range_min_ = range_min_;
   }

   public float getrange_max()
   {
      return range_max_;
   }

   public void setrange_max(float range_max_)
   {
      this.range_max_ = range_max_;
   }

   public sensor_msgs.msg.dds.LaserEcho getranges()
   {
      return ranges_;
   }

   public sensor_msgs.msg.dds.LaserEcho getintensities()
   {
      return intensities_;
   }


}