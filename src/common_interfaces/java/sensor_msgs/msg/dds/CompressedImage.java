/*
 * This class was automatically generated by jros2
 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This message contains a compressed image.
*/
public class CompressedImage implements ROS2Message<CompressedImage>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::CompressedImage_";

   private sensor_msgs.msg.dds.std_msgs/Header header_;
   private StringBuilder format_;
   private IDLByteSequence data_;

   public CompressedImage()
   {
      data_ = new IDLByteSequence();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // format_
      currentAlignment += data_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeString(format_);
      data_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      buffer.readString(format_);
      data_.deserialize(buffer);

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(CompressedImage from)
   {
      format_ = from.format_;
      data_.set(from.data_);

   }

   public sensor_msgs.msg.dds.std_msgs/Header getheader()
   {
      return header_;
   }

   public StringBuilder getformat()
   {
      return format_;
   }

   public void setformat(StringBuilder format_)
   {
      this.format_ = format_;
   }

   public IDLByteSequence getdata()
   {
      return data_;
   }


}