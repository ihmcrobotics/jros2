/*
 * This class was automatically generated by jros2
 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
    field vector in Tesla
    If your sensor does not output 3 axes,
    put NaNs in the components not reported.
*/
public class MagneticField implements ROS2Message<MagneticField>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::MagneticField_";

   private double[] magnetic_field_covariance_;

   public MagneticField()
   {
      magnetic_field_covariance_ = new double[9];

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += (9 * 8) + CDRBuffer.alignment(currentAlignment, (9 * 8)); // magnetic_field_covariance_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      for (int i = 0; i < magnetic_field_covariance_.length; ++i)
      {
         buffer.writeDouble(magnetic_field_covariance_[i]);
      }

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      for (int i = 0; i < magnetic_field_covariance_.length; ++i)
      {
      magnetic_field_covariance_[i] = buffer.readDouble();
      }

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(MagneticField from)
   {
      for (int i = 0; i < magnetic_field_covariance_.length; ++i)
      {
         magnetic_field_covariance_[i] = from.magnetic_field_covariance_[i];
      }

   }

   public double[] getmagnetic_field_covariance()
   {
      return magnetic_field_covariance_;
   }


}