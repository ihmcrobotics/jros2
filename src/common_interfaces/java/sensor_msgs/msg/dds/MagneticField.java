/*
 * This class was automatically generated by jros2
 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   Measurement of the Magnetic Field vector at a specific location.

   If the covariance of the measurement is known, it should be filled in.
   If all you know is the variance of each measurement, e.g. from the datasheet,
   just put those along the diagonal.
   A covariance matrix of all zeros will be interpreted as "covariance unknown",
   and to use the data a covariance will have to be assumed or gotten from some
   other source.
*/
public class MagneticField implements ROS2Message<MagneticField>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::MagneticField_";

   private std_msgs.msg.dds.Header header_;
   private geometry_msgs.msg.dds.Vector3 magnetic_field_;
   private double[] magnetic_field_covariance_;

   public MagneticField()
   {
      header_ = new std_msgs.msg.dds.Header();
      magnetic_field_ = new geometry_msgs.msg.dds.Vector3();
      magnetic_field_covariance_ = new double[9];

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += (9 * 8) + CDRBuffer.alignment(currentAlignment, (9 * 8)); // magnetic_field_covariance_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      for (int i = 0; i < magnetic_field_covariance_.length; ++i)
      {
         buffer.writeDouble(magnetic_field_covariance_[i]);
      }

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      for (int i = 0; i < magnetic_field_covariance_.length; ++i)
      {
      magnetic_field_covariance_[i] = buffer.readDouble();
      }

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(MagneticField from)
   {
      for (int i = 0; i < magnetic_field_covariance_.length; ++i)
      {
         magnetic_field_covariance_[i] = from.magnetic_field_covariance_[i];
      }

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public geometry_msgs.msg.dds.Vector3 getmagnetic_field()
   {
      return magnetic_field_;
   }

   public double[] getmagnetic_field_covariance()
   {
      return magnetic_field_covariance_;
   }


}