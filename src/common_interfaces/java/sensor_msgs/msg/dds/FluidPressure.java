/*
 * This class was automatically generated by jros2
 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   frame_id is the location of the pressure sensor
*/
public class FluidPressure implements ROS2Message<FluidPressure>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::FluidPressure_";

   private double fluid_pressure_;
   private double variance_;

   public FluidPressure()
   {
   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // fluid_pressure_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // variance_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeDouble(fluid_pressure_);
      buffer.writeDouble(variance_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      fluid_pressure_ = buffer.readDouble();
      variance_ = buffer.readDouble();

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(FluidPressure from)
   {
      fluid_pressure_ = from.fluid_pressure_;
      variance_ = from.variance_;

   }

   public double getfluid_pressure()
   {
      return fluid_pressure_;
   }

   public void setfluid_pressure(double fluid_pressure_)
   {
      this.fluid_pressure_ = fluid_pressure_;
   }

   public double getvariance()
   {
      return variance_;
   }

   public void setvariance(double variance_)
   {
      this.variance_ = variance_;
   }


}