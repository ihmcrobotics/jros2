/*
 * This class was automatically generated by jros2
 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   Reports the state of a joystick's axes and buttons.
*/
public class Joy implements ROS2Message<Joy>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::Joy_";

   /**
      The timestamp is the time at which data is received from the joystick.
   */
   private std_msgs.msg.dds.Header header_;
   /**
      The axes measurements from a joystick.
   */
   private IDLFloatSequence axes_;
   /**
      The buttons measurements from a joystick.
   */
   private IDLIntSequence buttons_;

   public Joy()
   {
      axes_ = new IDLFloatSequence();
      buttons_ = new IDLIntSequence();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += axes_.calculateSizeBytes(currentAlignment);
      currentAlignment += buttons_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      axes_.serialize(buffer);
      buttons_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      axes_.deserialize(buffer);
      buttons_.deserialize(buffer);

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(Joy from)
   {
      axes_.set(from.axes_);
      buttons_.set(from.buttons_);

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public IDLFloatSequence getaxes()
   {
      return axes_;
   }

   public IDLIntSequence getbuttons()
   {
      return buttons_;
   }


}