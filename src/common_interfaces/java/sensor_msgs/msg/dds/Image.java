/*
 * This class was automatically generated by jros2
 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This message contains an uncompressed image
   (0, 0) is at top-left corner of image
*/
public class Image implements ROS2Message<Image>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::Image_";

   private std_msgs.msg.dds.Header header_;
   private int height_;
   private int width_;
   private StringBuilder encoding_;
   private byte is_bigendian_;
   private int step_;
   private IDLByteSequence data_;

   public Image()
   {
      data_ = new IDLByteSequence();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // height_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // width_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // encoding_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // is_bigendian_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // step_
      currentAlignment += data_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeInt(height_);
      buffer.writeInt(width_);
      buffer.writeString(encoding_);
      buffer.writeByte(is_bigendian_);
      buffer.writeInt(step_);
      data_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      height_ = buffer.readInt();
      width_ = buffer.readInt();
      buffer.readString(encoding_);
      is_bigendian_ = buffer.readByte();
      step_ = buffer.readInt();
      data_.deserialize(buffer);

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(Image from)
   {
      height_ = from.height_;
      width_ = from.width_;
      encoding_ = from.encoding_;
      is_bigendian_ = from.is_bigendian_;
      step_ = from.step_;
      data_.set(from.data_);

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public int getheight()
   {
      return height_;
   }

   public void setheight(int height_)
   {
      this.height_ = height_;
   }

   public int getwidth()
   {
      return width_;
   }

   public void setwidth(int width_)
   {
      this.width_ = width_;
   }

   public StringBuilder getencoding()
   {
      return encoding_;
   }

   public void setencoding(StringBuilder encoding_)
   {
      this.encoding_ = encoding_;
   }

   public byte getis_bigendian()
   {
      return is_bigendian_;
   }

   public void setis_bigendian(byte is_bigendian_)
   {
      this.is_bigendian_ = is_bigendian_;
   }

   public int getstep()
   {
      return step_;
   }

   public void setstep(int step_)
   {
      this.step_ = step_;
   }

   public IDLByteSequence getdata()
   {
      return data_;
   }


}