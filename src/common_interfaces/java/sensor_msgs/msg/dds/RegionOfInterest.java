/*
 * This class was automatically generated by jros2
 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This message is used to specify a region of interest within an image.

   When used to specify the ROI setting of the camera when the image was
   taken, the height and width fields should either match the height and
   width fields for the associated image; or height = width = 0
   indicates that the full resolution image was captured.
*/
public class RegionOfInterest implements ROS2Message<RegionOfInterest>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::RegionOfInterest_";

   private int x_offset_;
   /**
      (0 if the ROI includes the left edge of the image)
   */
   private int y_offset_;
   /**
      (0 if the ROI includes the top edge of the image)
   */
   private int height_;
   private int width_;
   /**
      True if a distinct rectified ROI should be calculated from the "raw"
      ROI in this message. Typically this should be False if the full image
      is captured (ROI not used), and True if a subwindow is captured (ROI
      used).
   */
   private boolean do_rectify_;

   public RegionOfInterest()
   {
   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // x_offset_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // y_offset_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // height_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // width_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // do_rectify_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeInt(x_offset_);
      buffer.writeInt(y_offset_);
      buffer.writeInt(height_);
      buffer.writeInt(width_);
      buffer.writeBoolean(do_rectify_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      x_offset_ = buffer.readInt();
      y_offset_ = buffer.readInt();
      height_ = buffer.readInt();
      width_ = buffer.readInt();
      do_rectify_ = buffer.readBoolean();

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(RegionOfInterest from)
   {
      x_offset_ = from.x_offset_;
      y_offset_ = from.y_offset_;
      height_ = from.height_;
      width_ = from.width_;
      do_rectify_ = from.do_rectify_;

   }

   public int getx_offset()
   {
      return x_offset_;
   }

   public void setx_offset(int x_offset_)
   {
      this.x_offset_ = x_offset_;
   }
   public int gety_offset()
   {
      return y_offset_;
   }

   public void sety_offset(int y_offset_)
   {
      this.y_offset_ = y_offset_;
   }
   public int getheight()
   {
      return height_;
   }

   public void setheight(int height_)
   {
      this.height_ = height_;
   }
   public int getwidth()
   {
      return width_;
   }

   public void setwidth(int width_)
   {
      this.width_ = width_;
   }
   public boolean getdo_rectify()
   {
      return do_rectify_;
   }

   public void setdo_rectify(boolean do_rectify_)
   {
      this.do_rectify_ = do_rectify_;
   }

}