/*
 * This class was automatically generated by jros2
 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This message is used by the PointCloud message to hold optional data
   associated with each point in the cloud. The length of the values
   array should be the same as the length of the points array in the
   PointCloud, and each value should be associated with the corresponding
   point.

   Channel names in existing practice include:
   "u", "v" - row and column (respectively) in the left stereo image.
   This is opposite to usual conventions but remains for
   historical reasons. The newer PointCloud2 message has no
   such problem.
   "rgb" - For point clouds produced by color stereo cameras. uint8
   (R,G,B) values packed into the least significant 24 bits,
   in order.
   "intensity" - laser or pixel intensity.
   "distance"
*/
public class ChannelFloat32 implements ROS2Message<ChannelFloat32>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::ChannelFloat32_";

   /**
      The channel name should give semantics of the channel (e.g.
      "intensity" instead of "value").
   */
   private StringBuilder name_;
   /**
      The values array should be 1-1 with the elements of the associated
      PointCloud.
   */
   private IDLFloatSequence values_;

   public ChannelFloat32()
   {
      values_ = new IDLFloatSequence();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // name_
      currentAlignment += values_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeString(name_);
      values_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      buffer.readString(name_);
      values_.deserialize(buffer);

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(ChannelFloat32 from)
   {
      name_ = from.name_;
      values_.set(from.values_);

   }

   public StringBuilder getname()
   {
      return name_;
   }

   public void setname(StringBuilder name_)
   {
      this.name_ = name_;
   }

   public IDLFloatSequence getvalues()
   {
      return values_;
   }


}