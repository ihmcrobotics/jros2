/*
 * This class was automatically generated by jros2
 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   Single photometric illuminance measurement.  Light should be assumed to be
   measured along the sensor's x-axis (the area of detection is the y-z plane).
   The illuminance should have a 0 or positive value and be received with
   the sensor's +X axis pointing toward the light source.

   Photometric illuminance is the measure of the human eye's sensitivity of the
   intensity of light encountering or passing through a surface.

   All other Photometric and Radiometric measurements should not use this message.
   This message cannot represent:
   - Luminous intensity (candela/light source output)
   - Luminance (nits/light output per area)
   - Irradiance (watt/area), etc.
*/
public class Illuminance implements ROS2Message<Illuminance>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::Illuminance_";

   private std_msgs.msg.dds.Header header_;
   private double illuminance_;
   private double variance_;

   public Illuminance()
   {
   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // illuminance_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // variance_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeDouble(illuminance_);
      buffer.writeDouble(variance_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      illuminance_ = buffer.readDouble();
      variance_ = buffer.readDouble();

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(Illuminance from)
   {
      illuminance_ = from.illuminance_;
      variance_ = from.variance_;

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public double getilluminance()
   {
      return illuminance_;
   }

   public void setilluminance(double illuminance_)
   {
      this.illuminance_ = illuminance_;
   }

   public double getvariance()
   {
      return variance_;
   }

   public void setvariance(double variance_)
   {
      this.variance_ = variance_;
   }


}