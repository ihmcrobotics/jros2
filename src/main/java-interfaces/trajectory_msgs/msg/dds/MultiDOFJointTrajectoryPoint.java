/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
(trajectory_msgs/MultiDOFJointTrajectoryPoint.msg):
##################################################################################
        # Each multi-dof joint can specify a transform (up to 6 DOF).
        geometry_msgs/Transform[] transforms

        # There can be a velocity specified for the origin of the joint.
        geometry_msgs/Twist[] velocities

        # There can be an acceleration specified for the origin of the joint.
        geometry_msgs/Twist[] accelerations

        # Desired time from the trajectory start to arrive at this trajectory point.
        builtin_interfaces/Duration time_from_start

##################################################################################

 */
package trajectory_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

public class MultiDOFJointTrajectoryPoint implements ROS2Message<MultiDOFJointTrajectoryPoint>
{
   public static final java.lang.String name = "trajectory_msgs::msg::dds_::MultiDOFJointTrajectoryPoint_";

   /**
      Each multi-dof joint can specify a transform (up to 6 DOF).
   */
   private final IDLObjectSequence<geometry_msgs.msg.dds.Transform> transforms_;
   /**
      There can be a velocity specified for the origin of the joint.
   */
   private final IDLObjectSequence<geometry_msgs.msg.dds.Twist> velocities_;
   /**
      There can be an acceleration specified for the origin of the joint.
   */
   private final IDLObjectSequence<geometry_msgs.msg.dds.Twist> accelerations_;
   /**
      Desired time from the trajectory start to arrive at this trajectory point.
   */
   private final builtin_interfaces.msg.dds.Duration time_from_start_;

   public MultiDOFJointTrajectoryPoint()
   {
      transforms_ = new IDLObjectSequence<geometry_msgs.msg.dds.Transform>(geometry_msgs.msg.dds.Transform.class);
      velocities_ = new IDLObjectSequence<geometry_msgs.msg.dds.Twist>(geometry_msgs.msg.dds.Twist.class);
      accelerations_ = new IDLObjectSequence<geometry_msgs.msg.dds.Twist>(geometry_msgs.msg.dds.Twist.class);
      time_from_start_ = new builtin_interfaces.msg.dds.Duration();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += transforms_.calculateSizeBytes(currentAlignment);
      currentAlignment += velocities_.calculateSizeBytes(currentAlignment);
      currentAlignment += accelerations_.calculateSizeBytes(currentAlignment);
      currentAlignment += time_from_start_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      transforms_.serialize(buffer);
      velocities_.serialize(buffer);
      accelerations_.serialize(buffer);
      time_from_start_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      transforms_.deserialize(buffer);
      velocities_.deserialize(buffer);
      accelerations_.deserialize(buffer);
      time_from_start_.deserialize(buffer);

   }

   @Override
   public void set(MultiDOFJointTrajectoryPoint from)
   {
      transforms_.set(from.transforms_);
      velocities_.set(from.velocities_);
      accelerations_.set(from.accelerations_);
      time_from_start_.set(from.time_from_start_);

   }

   public IDLObjectSequence<geometry_msgs.msg.dds.Transform> gettransforms()
   {
      return transforms_;
   }

   public IDLObjectSequence<geometry_msgs.msg.dds.Twist> getvelocities()
   {
      return velocities_;
   }

   public IDLObjectSequence<geometry_msgs.msg.dds.Twist> getaccelerations()
   {
      return accelerations_;
   }

   public builtin_interfaces.msg.dds.Duration gettime_from_start()
   {
      return time_from_start_;
   }


}