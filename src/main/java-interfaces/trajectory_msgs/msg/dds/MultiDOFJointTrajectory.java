/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
(trajectory_msgs/MultiDOFJointTrajectory.msg):
##################################################################################
   # The header is used to specify the coordinate frame and the reference time for the trajectory durations
   std_msgs/Header header

   # A representation of a multi-dof joint trajectory (each point is a transformation)
   # Each point along the trajectory will include an array of positions/velocities/accelerations
   # that has the same length as the array of joint names, and has the same order of joints as 
   # the joint names array.

   string[] joint_names
   MultiDOFJointTrajectoryPoint[] points

##################################################################################

 */
package trajectory_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

public class MultiDOFJointTrajectory implements ROS2Message<MultiDOFJointTrajectory>
{
   public static final java.lang.String name = "trajectory_msgs::msg::dds_::MultiDOFJointTrajectory_";

   /**
      The header is used to specify the coordinate frame and the reference time for the trajectory durations
   */
   private final std_msgs.msg.dds.Header header_;
   private final IDLStringSequence joint_names_;
   private final IDLObjectSequence<trajectory_msgs.msg.dds.MultiDOFJointTrajectoryPoint> points_;

   public MultiDOFJointTrajectory()
   {
      header_ = new std_msgs.msg.dds.Header();
      joint_names_ = new IDLStringSequence();
      points_ = new IDLObjectSequence<trajectory_msgs.msg.dds.MultiDOFJointTrajectoryPoint>(trajectory_msgs.msg.dds.MultiDOFJointTrajectoryPoint.class);

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += joint_names_.calculateSizeBytes(currentAlignment);
      currentAlignment += points_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      joint_names_.serialize(buffer);
      points_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      joint_names_.deserialize(buffer);
      points_.deserialize(buffer);

   }

   @Override
   public void set(MultiDOFJointTrajectory from)
   {
      header_.set(from.header_);
      joint_names_.set(from.joint_names_);
      points_.set(from.points_);

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public IDLStringSequence getjoint_names()
   {
      return joint_names_;
   }

   public IDLObjectSequence<trajectory_msgs.msg.dds.MultiDOFJointTrajectoryPoint> getpoints()
   {
      return points_;
   }


}