/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(nav_msgs/OccupancyGrid.msg)
##################################################################################
   # This represents a 2-D grid map
   std_msgs/Header header

   # MetaData for the map
   MapMetaData info

   # The map data, in row-major order, starting with (0,0). 
   # Cell (1, 0) will be listed second, representing the next cell in the x direction. 
   # Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).
   # The values inside are application dependent, but frequently, 
   # 0 represents unoccupied, 1 represents definitely occupied, and
   # -1 represents unknown. 
   int8[] data

##################################################################################

 */
package nav_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

public class OccupancyGrid implements ROS2Message<OccupancyGrid>
{
   public static final java.lang.String name = "nav_msgs::msg::dds_::OccupancyGrid_";

   /**
      This represents a 2-D grid map
   */
   private final std_msgs.msg.dds.Header header_;
   /**
      MetaData for the map
   */
   private final nav_msgs.msg.dds.MapMetaData info_;
   /**
      The map data, in row-major order, starting with (0,0).
      Cell (1, 0) will be listed second, representing the next cell in the x direction.
      Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).
      The values inside are application dependent, but frequently,
      0 represents unoccupied, 1 represents definitely occupied, and
      -1 represents unknown.
   */
   private final IDLByteSequence data_;

   public OccupancyGrid()
   {
      header_ = new std_msgs.msg.dds.Header();
      info_ = new nav_msgs.msg.dds.MapMetaData();
      data_ = new IDLByteSequence();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += info_.calculateSizeBytes(currentAlignment);
      currentAlignment += data_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      info_.serialize(buffer);
      data_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      info_.deserialize(buffer);
      data_.deserialize(buffer);

   }

   @Override
   public void set(OccupancyGrid from)
   {
      header_.set(from.header_);
      info_.set(from.info_);
      data_.set(from.data_);

   }

   public std_msgs.msg.dds.Header getHeader()
   {
      return header_;
   }

   public nav_msgs.msg.dds.MapMetaData getInfo()
   {
      return info_;
   }

   public IDLByteSequence getData()
   {
      return data_;
   }


}