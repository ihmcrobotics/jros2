/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
(nav_msgs/Odometry.msg):
##################################################################################
        # This represents an estimate of a position and velocity in free space.
        # The pose in this message should be specified in the coordinate frame given by header.frame_id
        # The twist in this message should be specified in the coordinate frame given by the child_frame_id

        # Includes the frame id of the pose parent.
        std_msgs/Header header

        # Frame id the pose points to. The twist is in this coordinate frame.
        string child_frame_id

        # Estimated pose that is typically relative to a fixed world frame.
        geometry_msgs/PoseWithCovariance pose

        # Estimated linear and angular velocity relative to child_frame_id.
        geometry_msgs/TwistWithCovariance twist

##################################################################################

 */
package nav_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This represents an estimate of a position and velocity in free space.
   The pose in this message should be specified in the coordinate frame given by header.frame_id
   The twist in this message should be specified in the coordinate frame given by the child_frame_id
*/
public class Odometry implements ROS2Message<Odometry>
{
   public static final java.lang.String name = "nav_msgs::msg::dds_::Odometry_";

   /**
      Includes the frame id of the pose parent.
   */
   private final std_msgs.msg.dds.Header header_;
   /**
      Frame id the pose points to. The twist is in this coordinate frame.
   */
   private final StringBuilder child_frame_id_;
   /**
      Estimated pose that is typically relative to a fixed world frame.
   */
   private final geometry_msgs.msg.dds.PoseWithCovariance pose_;
   /**
      Estimated linear and angular velocity relative to child_frame_id.
   */
   private final geometry_msgs.msg.dds.TwistWithCovariance twist_;

   public Odometry()
   {
      header_ = new std_msgs.msg.dds.Header();
      child_frame_id_ = new StringBuilder();
      pose_ = new geometry_msgs.msg.dds.PoseWithCovariance();
      twist_ = new geometry_msgs.msg.dds.TwistWithCovariance();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += (1 * child_frame_id_.length()) + CDRBuffer.alignment(currentAlignment, (1 * child_frame_id_.length())); // child_frame_id_
      currentAlignment += pose_.calculateSizeBytes(currentAlignment);
      currentAlignment += twist_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      buffer.writeString(child_frame_id_);
      pose_.serialize(buffer);
      twist_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      buffer.readString(child_frame_id_);
      pose_.deserialize(buffer);
      twist_.deserialize(buffer);

   }

   @Override
   public void set(Odometry from)
   {
      header_.set(from.header_);
      child_frame_id_.delete(0, child_frame_id_.length());
      child_frame_id_.insert(0, from.child_frame_id_);
      pose_.set(from.pose_);
      twist_.set(from.twist_);

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public StringBuilder getchild_frame_id()
   {
      return child_frame_id_;
   }

   public geometry_msgs.msg.dds.PoseWithCovariance getpose()
   {
      return pose_;
   }

   public geometry_msgs.msg.dds.TwistWithCovariance gettwist()
   {
      return twist_;
   }


}