/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
(nav_msgs/GridCells.msg):
##################################################################################
        # An array of cells in a 2D grid

        std_msgs/Header header

        # Width of each cell
        float32 cell_width

        # Height of each cell
        float32 cell_height

        # Each cell is represented by the Point at the center of the cell
        geometry_msgs/Point[] cells

##################################################################################

 */
package nav_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   An array of cells in a 2D grid
*/
public class GridCells implements ROS2Message<GridCells>
{
   public static final java.lang.String name = "nav_msgs::msg::dds_::GridCells_";

   private final std_msgs.msg.dds.Header header_;
   /**
      Width of each cell
   */
   private float cell_width_;
   /**
      Height of each cell
   */
   private float cell_height_;
   /**
      Each cell is represented by the Point at the center of the cell
   */
   private final IDLObjectSequence<geometry_msgs.msg.dds.Point> cells_;

   public GridCells()
   {
      header_ = new std_msgs.msg.dds.Header();
      cells_ = new IDLObjectSequence<geometry_msgs.msg.dds.Point>(geometry_msgs.msg.dds.Point.class);

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // cell_width_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // cell_height_
      currentAlignment += cells_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      buffer.writeFloat(cell_width_);
      buffer.writeFloat(cell_height_);
      cells_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      cell_width_ = buffer.readFloat();
      cell_height_ = buffer.readFloat();
      cells_.deserialize(buffer);

   }

   @Override
   public void set(GridCells from)
   {
      header_.set(from.header_);
      cell_width_ = from.cell_width_;
      cell_height_ = from.cell_height_;
      cells_.set(from.cells_);

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public float getcell_width()
   {
      return cell_width_;
   }

   public void setcell_width(float cell_width_)
   {
      this.cell_width_ = cell_width_;
   }

   public float getcell_height()
   {
      return cell_height_;
   }

   public void setcell_height(float cell_height_)
   {
      this.cell_height_ = cell_height_;
   }

   public IDLObjectSequence<geometry_msgs.msg.dds.Point> getcells()
   {
      return cells_;
   }


}