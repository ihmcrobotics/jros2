/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
(sensor_msgs/PointCloud.msg):
##################################################################################
        ## THIS MESSAGE IS DEPRECATED AS OF FOXY
        ## Please use sensor_msgs/PointCloud2

        # This message holds a collection of 3d points, plus optional additional
        # information about each point.

        # Time of sensor data acquisition, coordinate frame ID.
        std_msgs/Header header

        # Array of 3d points. Each Point32 should be interpreted as a 3d point
        # in the frame given in the header.
        geometry_msgs/Point32[] points

        # Each channel should have the same number of elements as points array,
        # and the data in each channel should correspond 1:1 with each point.
        # Channel names in common practice are listed in ChannelFloat32.msg.
        ChannelFloat32[] channels

##################################################################################

 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This message holds a collection of 3d points, plus optional additional
   information about each point.
*/
public class PointCloud implements ROS2Message<PointCloud>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::PointCloud_";

   /**
      Time of sensor data acquisition, coordinate frame ID.
   */
   private final std_msgs.msg.dds.Header header_;
   /**
      Array of 3d points. Each Point32 should be interpreted as a 3d point
      in the frame given in the header.
   */
   private final IDLObjectSequence<geometry_msgs.msg.dds.Point32> points_;
   /**
      Each channel should have the same number of elements as points array,
      and the data in each channel should correspond 1:1 with each point.
      Channel names in common practice are listed in ChannelFloat32.msg.
   */
   private final IDLObjectSequence<sensor_msgs.msg.dds.ChannelFloat32> channels_;

   public PointCloud()
   {
      header_ = new std_msgs.msg.dds.Header();
      points_ = new IDLObjectSequence<geometry_msgs.msg.dds.Point32>(geometry_msgs.msg.dds.Point32.class);
      channels_ = new IDLObjectSequence<sensor_msgs.msg.dds.ChannelFloat32>(sensor_msgs.msg.dds.ChannelFloat32.class);

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += points_.calculateSizeBytes(currentAlignment);
      currentAlignment += channels_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      points_.serialize(buffer);
      channels_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      points_.deserialize(buffer);
      channels_.deserialize(buffer);

   }

   @Override
   public void set(PointCloud from)
   {
      header_.set(from.header_);
      points_.set(from.points_);
      channels_.set(from.channels_);

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public IDLObjectSequence<geometry_msgs.msg.dds.Point32> getpoints()
   {
      return points_;
   }

   public IDLObjectSequence<sensor_msgs.msg.dds.ChannelFloat32> getchannels()
   {
      return channels_;
   }


}