/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
(sensor_msgs/Temperature.msg):
##################################################################################
   # Single temperature reading.

   std_msgs/Header header # timestamp is the time the temperature was measured
                                # frame_id is the location of the temperature reading

   float64 temperature          # Measurement of the Temperature in Degrees Celsius.

   float64 variance             # 0 is interpreted as variance unknown.

##################################################################################

 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   Single temperature reading.
*/
public class Temperature implements ROS2Message<Temperature>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::Temperature_";

   private final std_msgs.msg.dds.Header header_;
   private double temperature_;
   private double variance_;

   public Temperature()
   {
      header_ = new std_msgs.msg.dds.Header();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // temperature_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // variance_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      buffer.writeDouble(temperature_);
      buffer.writeDouble(variance_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      temperature_ = buffer.readDouble();
      variance_ = buffer.readDouble();

   }

   @Override
   public void set(Temperature from)
   {
      header_.set(from.header_);
      temperature_ = from.temperature_;
      variance_ = from.variance_;

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public double gettemperature()
   {
      return temperature_;
   }

   public void settemperature(double temperature_)
   {
      this.temperature_ = temperature_;
   }

   public double getvariance()
   {
      return variance_;
   }

   public void setvariance(double variance_)
   {
      this.variance_ = variance_;
   }


}