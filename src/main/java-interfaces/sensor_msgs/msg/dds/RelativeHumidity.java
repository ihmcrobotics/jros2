/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
(sensor_msgs/RelativeHumidity.msg):
##################################################################################
   # Single reading from a relative humidity sensor.
   # Defines the ratio of partial pressure of water vapor to the saturated vapor
   # pressure at a temperature.

   std_msgs/Header header # timestamp of the measurement
                                # frame_id is the location of the humidity sensor

   float64 relative_humidity    # Expression of the relative humidity
                                # from 0.0 to 1.0.
                                # 0.0 is no partial pressure of water vapor
                                # 1.0 represents partial pressure of saturation

   float64 variance             # 0 is interpreted as variance unknown

##################################################################################

 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   Single reading from a relative humidity sensor.
   Defines the ratio of partial pressure of water vapor to the saturated vapor
   pressure at a temperature.
*/
public class RelativeHumidity implements ROS2Message<RelativeHumidity>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::RelativeHumidity_";

   private final std_msgs.msg.dds.Header header_;
   private double relative_humidity_;
   private double variance_;

   public RelativeHumidity()
   {
      header_ = new std_msgs.msg.dds.Header();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // relative_humidity_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // variance_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      buffer.writeDouble(relative_humidity_);
      buffer.writeDouble(variance_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      relative_humidity_ = buffer.readDouble();
      variance_ = buffer.readDouble();

   }

   @Override
   public void set(RelativeHumidity from)
   {
      header_.set(from.header_);
      relative_humidity_ = from.relative_humidity_;
      variance_ = from.variance_;

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public double getrelative_humidity()
   {
      return relative_humidity_;
   }

   public void setrelative_humidity(double relative_humidity_)
   {
      this.relative_humidity_ = relative_humidity_;
   }

   public double getvariance()
   {
      return variance_;
   }

   public void setvariance(double variance_)
   {
      this.variance_ = variance_;
   }


}