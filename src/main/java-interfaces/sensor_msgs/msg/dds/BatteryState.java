/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
(sensor_msgs/BatteryState.msg):
##################################################################################

   # Constants are chosen to match the enums in the linux kernel
   # defined in include/linux/power_supply.h as of version 3.7
   # The one difference is for style reasons the constants are
   # all uppercase not mixed case.

   # Power supply status constants
   uint8 POWER_SUPPLY_STATUS_UNKNOWN = 0
   uint8 POWER_SUPPLY_STATUS_CHARGING = 1
   uint8 POWER_SUPPLY_STATUS_DISCHARGING = 2
   uint8 POWER_SUPPLY_STATUS_NOT_CHARGING = 3
   uint8 POWER_SUPPLY_STATUS_FULL = 4

   # Power supply health constants
   uint8 POWER_SUPPLY_HEALTH_UNKNOWN = 0
   uint8 POWER_SUPPLY_HEALTH_GOOD = 1
   uint8 POWER_SUPPLY_HEALTH_OVERHEAT = 2
   uint8 POWER_SUPPLY_HEALTH_DEAD = 3
   uint8 POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4
   uint8 POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5
   uint8 POWER_SUPPLY_HEALTH_COLD = 6
   uint8 POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7
   uint8 POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8

   # Power supply technology (chemistry) constants
   uint8 POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0
   uint8 POWER_SUPPLY_TECHNOLOGY_NIMH = 1
   uint8 POWER_SUPPLY_TECHNOLOGY_LION = 2
   uint8 POWER_SUPPLY_TECHNOLOGY_LIPO = 3
   uint8 POWER_SUPPLY_TECHNOLOGY_LIFE = 4
   uint8 POWER_SUPPLY_TECHNOLOGY_NICD = 5
   uint8 POWER_SUPPLY_TECHNOLOGY_LIMN = 6

   std_msgs/Header  header
   float32 voltage          # Voltage in Volts (Mandatory)
   float32 temperature      # Temperature in Degrees Celsius (If unmeasured NaN)
   float32 current          # Negative when discharging (A)  (If unmeasured NaN)
   float32 charge           # Current charge in Ah  (If unmeasured NaN)
   float32 capacity         # Capacity in Ah (last full capacity)  (If unmeasured NaN)
   float32 design_capacity  # Capacity in Ah (design capacity)  (If unmeasured NaN)
   float32 percentage       # Charge percentage on 0 to 1 range  (If unmeasured NaN)
   uint8   power_supply_status     # The charging status as reported. Values defined above
   uint8   power_supply_health     # The battery health metric. Values defined above
   uint8   power_supply_technology # The battery chemistry. Values defined above
   bool    present          # True if the battery is present

   float32[] cell_voltage   # An array of individual cell voltages for each cell in the pack
                            # If individual voltages unknown but number of cells known set each to NaN
   float32[] cell_temperature # An array of individual cell temperatures for each cell in the pack
                              # If individual temperatures unknown but number of cells known set each to NaN
   string location          # The location into which the battery is inserted. (slot number or plug)
   string serial_number     # The best approximation of the battery serial number

##################################################################################

 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   Constants are chosen to match the enums in the linux kernel
   defined in include/linux/power_supply.h as of version 3.7
   The one difference is for style reasons the constants are
   all uppercase not mixed case.
*/
public class BatteryState implements ROS2Message<BatteryState>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::BatteryState_";

   /**
      Power supply status constants
   */
   public static final byte POWER_SUPPLY_STATUS_UNKNOWN = 0;
   public static final byte POWER_SUPPLY_STATUS_CHARGING = 1;
   public static final byte POWER_SUPPLY_STATUS_DISCHARGING = 2;
   public static final byte POWER_SUPPLY_STATUS_NOT_CHARGING = 3;
   public static final byte POWER_SUPPLY_STATUS_FULL = 4;
   /**
      Power supply health constants
   */
   public static final byte POWER_SUPPLY_HEALTH_UNKNOWN = 0;
   public static final byte POWER_SUPPLY_HEALTH_GOOD = 1;
   public static final byte POWER_SUPPLY_HEALTH_OVERHEAT = 2;
   public static final byte POWER_SUPPLY_HEALTH_DEAD = 3;
   public static final byte POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4;
   public static final byte POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5;
   public static final byte POWER_SUPPLY_HEALTH_COLD = 6;
   public static final byte POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7;
   public static final byte POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8;
   /**
      Power supply technology (chemistry) constants
   */
   public static final byte POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0;
   public static final byte POWER_SUPPLY_TECHNOLOGY_NIMH = 1;
   public static final byte POWER_SUPPLY_TECHNOLOGY_LION = 2;
   public static final byte POWER_SUPPLY_TECHNOLOGY_LIPO = 3;
   public static final byte POWER_SUPPLY_TECHNOLOGY_LIFE = 4;
   public static final byte POWER_SUPPLY_TECHNOLOGY_NICD = 5;
   public static final byte POWER_SUPPLY_TECHNOLOGY_LIMN = 6;
   private float voltage_;
   private float temperature_;
   private float current_;
   private float charge_;
   private float capacity_;
   private float design_capacity_;
   private float percentage_;
   private final IDLFloatSequence cell_voltage_;
   /**
      If individual voltages unknown but number of cells known set each to NaN
   */
   private final IDLFloatSequence cell_temperature_;
   /**
      If individual temperatures unknown but number of cells known set each to NaN
   */
   private final StringBuilder location_;
   private final StringBuilder serial_number_;

   public BatteryState()
   {
      cell_voltage_ = new IDLFloatSequence();
      cell_temperature_ = new IDLFloatSequence();
      location_ = new StringBuilder();
      serial_number_ = new StringBuilder();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // voltage_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // temperature_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // current_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // charge_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // capacity_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // design_capacity_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // percentage_
      currentAlignment += cell_voltage_.calculateSizeBytes(currentAlignment);
      currentAlignment += cell_temperature_.calculateSizeBytes(currentAlignment);
      currentAlignment += (1 * location_.length()) + CDRBuffer.alignment(currentAlignment, (1 * location_.length())); // location_
      currentAlignment += (1 * serial_number_.length()) + CDRBuffer.alignment(currentAlignment, (1 * serial_number_.length())); // serial_number_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeFloat(voltage_);
      buffer.writeFloat(temperature_);
      buffer.writeFloat(current_);
      buffer.writeFloat(charge_);
      buffer.writeFloat(capacity_);
      buffer.writeFloat(design_capacity_);
      buffer.writeFloat(percentage_);
      cell_voltage_.serialize(buffer);
      cell_temperature_.serialize(buffer);
      buffer.writeString(location_);
      buffer.writeString(serial_number_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      voltage_ = buffer.readFloat();
      temperature_ = buffer.readFloat();
      current_ = buffer.readFloat();
      charge_ = buffer.readFloat();
      capacity_ = buffer.readFloat();
      design_capacity_ = buffer.readFloat();
      percentage_ = buffer.readFloat();
      cell_voltage_.deserialize(buffer);
      cell_temperature_.deserialize(buffer);
      buffer.readString(location_);
      buffer.readString(serial_number_);

   }

   @Override
   public void set(BatteryState from)
   {
      voltage_ = from.voltage_;
      temperature_ = from.temperature_;
      current_ = from.current_;
      charge_ = from.charge_;
      capacity_ = from.capacity_;
      design_capacity_ = from.design_capacity_;
      percentage_ = from.percentage_;
      cell_voltage_.set(from.cell_voltage_);
      cell_temperature_.set(from.cell_temperature_);
      location_.delete(0, location_.length());
      location_.insert(0, from.location_);
      serial_number_.delete(0, serial_number_.length());
      serial_number_.insert(0, from.serial_number_);

   }

   public float getvoltage()
   {
      return voltage_;
   }

   public void setvoltage(float voltage_)
   {
      this.voltage_ = voltage_;
   }

   public float gettemperature()
   {
      return temperature_;
   }

   public void settemperature(float temperature_)
   {
      this.temperature_ = temperature_;
   }

   public float getcurrent()
   {
      return current_;
   }

   public void setcurrent(float current_)
   {
      this.current_ = current_;
   }

   public float getcharge()
   {
      return charge_;
   }

   public void setcharge(float charge_)
   {
      this.charge_ = charge_;
   }

   public float getcapacity()
   {
      return capacity_;
   }

   public void setcapacity(float capacity_)
   {
      this.capacity_ = capacity_;
   }

   public float getdesign_capacity()
   {
      return design_capacity_;
   }

   public void setdesign_capacity(float design_capacity_)
   {
      this.design_capacity_ = design_capacity_;
   }

   public float getpercentage()
   {
      return percentage_;
   }

   public void setpercentage(float percentage_)
   {
      this.percentage_ = percentage_;
   }

   public IDLFloatSequence getcell_voltage()
   {
      return cell_voltage_;
   }

   public IDLFloatSequence getcell_temperature()
   {
      return cell_temperature_;
   }

   public StringBuilder getlocation()
   {
      return location_;
   }

   public StringBuilder getserial_number()
   {
      return serial_number_;
   }


}