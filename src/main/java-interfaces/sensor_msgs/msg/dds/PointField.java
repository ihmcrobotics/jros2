/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(sensor_msgs/PointField.msg)
##################################################################################
   # This message holds the description of one point entry in the
   # PointCloud2 message format.
   uint8 INT8    = 1
   uint8 UINT8   = 2
   uint8 INT16   = 3
   uint8 UINT16  = 4
   uint8 INT32   = 5
   uint8 UINT32  = 6
   uint8 FLOAT32 = 7
   uint8 FLOAT64 = 8

   # Common PointField names are x, y, z, intensity, rgb, rgba
   string name      # Name of field
   uint32 offset    # Offset from start of point struct
   uint8  datatype  # Datatype enumeration, see above
   uint32 count     # How many elements in the field

##################################################################################

 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

public class PointField implements ROS2Message<PointField>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::PointField_";

   /**
      This message holds the description of one point entry in the
      PointCloud2 message format.
   */
   public static final byte INT8 = 1;
   public static final byte UINT8 = 2;
   public static final byte INT16 = 3;
   public static final byte UINT16 = 4;
   public static final byte INT32 = 5;
   public static final byte UINT32 = 6;
   public static final byte FLOAT32 = 7;
   public static final byte FLOAT64 = 8;
   /**
      Common PointField names are x, y, z, intensity, rgb, rgba
   */
   private final StringBuilder name_; // Name of field
   private int offset_; // Offset from start of point struct
   private int count_; // How many elements in the field

   public PointField()
   {
      name_ = new StringBuilder();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + name_.length() + 1; // name_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // offset_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // count_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeString(name_);
      buffer.writeInt(offset_);
      buffer.writeInt(count_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      buffer.readString(name_);
      offset_ = buffer.readInt();
      count_ = buffer.readInt();

   }

   @Override
   public void set(PointField from)
   {
      name_.delete(0, name_.length());
      name_.insert(0, from.name_);
      offset_ = from.offset_;
      count_ = from.count_;

   }

   public StringBuilder getName()
   {
      return name_;
   }

   public int getOffset()
   {
      return offset_;
   }

   public void setOffset(int offset_)
   {
      this.offset_ = offset_;
   }

   public int getCount()
   {
      return count_;
   }

   public void setCount(int count_)
   {
      this.count_ = count_;
   }


}