/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.
 *
 * Original .msg file content (sensor_msgs/CompressedImage.msg):

# This message contains a compressed image.

std_msgs/Header header # Header timestamp should be acquisition time of image
                             # Header frame_id should be optical frame of camera
                             # origin of frame should be optical center of cameara
                             # +x should point to the right in the image
                             # +y should point down in the image
                             # +z should point into to plane of the image

string format                # Specifies the format of the data
                             #   Acceptable values:
                             #     jpeg, png, tiff

uint8[] data                 # Compressed image buffer


 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This message contains a compressed image.
*/
public class CompressedImage implements ROS2Message<CompressedImage>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::CompressedImage_";

   private final std_msgs.msg.dds.Header header_;
   private final StringBuilder format_;
   private final IDLByteSequence data_;

   public CompressedImage()
   {
      header_ = new std_msgs.msg.dds.Header();
      format_ = new StringBuilder();
      data_ = new IDLByteSequence();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += (1 * format_.length()) + CDRBuffer.alignment(currentAlignment, (1 * format_.length())); // format_
      currentAlignment += data_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      buffer.writeString(format_);
      data_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      buffer.readString(format_);
      data_.deserialize(buffer);

   }

   @Override
   public void set(CompressedImage from)
   {
      header_.set(from.header_);
      format_.delete(0, format_.length());
      format_.insert(0, from.format_);
      data_.set(from.data_);

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public StringBuilder getformat()
   {
      return format_;
   }

   public IDLByteSequence getdata()
   {
      return data_;
   }


}