/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(sensor_msgs/TimeReference.msg)
##################################################################################
   # Measurement from an external time source not actively synchronized with the system clock.

   std_msgs/Header header      # stamp is system time for which measurement was valid
                                     # frame_id is not used

   builtin_interfaces/Time time_ref  # corresponding time from this external source
   string source                     # (optional) name of time source

##################################################################################

 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   Measurement from an external time source not actively synchronized with the system clock.
*/
public class TimeReference implements ROS2Message<TimeReference>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::TimeReference_";

   private final std_msgs.msg.dds.Header header_; // stamp is system time for which measurement was valid
   private final builtin_interfaces.msg.dds.Time time_ref_; // corresponding time from this external source
   private final StringBuilder source_; // (optional) name of time source

   public TimeReference()
   {
      header_ = new std_msgs.msg.dds.Header();
      time_ref_ = new builtin_interfaces.msg.dds.Time();
      source_ = new StringBuilder();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += time_ref_.calculateSizeBytes(currentAlignment);
      currentAlignment += (1 * source_.length()) + CDRBuffer.alignment(currentAlignment, (1 * source_.length())); // source_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      time_ref_.serialize(buffer);
      buffer.writeString(source_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      time_ref_.deserialize(buffer);
      buffer.readString(source_);

   }

   @Override
   public void set(TimeReference from)
   {
      header_.set(from.header_);
      time_ref_.set(from.time_ref_);
      source_.delete(0, source_.length());
      source_.insert(0, from.source_);

   }

   public std_msgs.msg.dds.Header getHeader()
   {
      return header_;
   }

   public builtin_interfaces.msg.dds.Time getTimeRef()
   {
      return time_ref_;
   }

   public StringBuilder getSource()
   {
      return source_;
   }


}