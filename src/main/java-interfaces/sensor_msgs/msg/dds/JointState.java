/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.
 *
 * Original .msg file content (sensor_msgs/JointState.msg):

# This is a message that holds data to describe the state of a set of torque controlled joints.
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state.
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty.
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

std_msgs/Header header

string[] name
float64[] position
float64[] velocity
float64[] effort


 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This is a message that holds data to describe the state of a set of torque controlled joints.

   The state of each joint (revolute or prismatic) is defined by:
   * the position of the joint (rad or m),
   * the velocity of the joint (rad/s or m/s) and
   * the effort that is applied in the joint (Nm or N).

   Each joint is uniquely identified by its name
   The header specifies the time at which the joint states were recorded. All the joint states
   in one message have to be recorded at the same time.

   This message consists of a multiple arrays, one for each part of the joint state.
   The goal is to make each of the fields optional. When e.g. your joints have no
   effort associated with them, you can leave the effort array empty.

   All arrays in this message should have the same size, or be empty.
   This is the only way to uniquely associate the joint name with the correct
   states.
*/
public class JointState implements ROS2Message<JointState>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::JointState_";

   private final std_msgs.msg.dds.Header header_;
   private final IDLStringSequence name_;
   private final IDLDoubleSequence position_;
   private final IDLDoubleSequence velocity_;
   private final IDLDoubleSequence effort_;

   public JointState()
   {
      header_ = new std_msgs.msg.dds.Header();
      name_ = new IDLStringSequence();
      position_ = new IDLDoubleSequence();
      velocity_ = new IDLDoubleSequence();
      effort_ = new IDLDoubleSequence();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += name_.calculateSizeBytes(currentAlignment);
      currentAlignment += position_.calculateSizeBytes(currentAlignment);
      currentAlignment += velocity_.calculateSizeBytes(currentAlignment);
      currentAlignment += effort_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      name_.serialize(buffer);
      position_.serialize(buffer);
      velocity_.serialize(buffer);
      effort_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      name_.deserialize(buffer);
      position_.deserialize(buffer);
      velocity_.deserialize(buffer);
      effort_.deserialize(buffer);

   }

   @Override
   public void set(JointState from)
   {
      header_.set(from.header_);
      name_.set(from.name_);
      position_.set(from.position_);
      velocity_.set(from.velocity_);
      effort_.set(from.effort_);

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public IDLStringSequence getname()
   {
      return name_;
   }

   public IDLDoubleSequence getposition()
   {
      return position_;
   }

   public IDLDoubleSequence getvelocity()
   {
      return velocity_;
   }

   public IDLDoubleSequence geteffort()
   {
      return effort_;
   }


}