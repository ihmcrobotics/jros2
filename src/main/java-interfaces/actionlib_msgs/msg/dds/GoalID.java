/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
(actionlib_msgs/GoalID.msg):
##################################################################################

   # The stamp should store the time at which this goal was requested.
   # It is used by an action server when it tries to preempt all
   # goals that were requested before a certain time
   builtin_interfaces/Time stamp

   # The id provides a way to associate feedback and
   # result message with specific goal requests. The id
   # specified must be unique.
   string id

##################################################################################

 */
package actionlib_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
*/
public class GoalID implements ROS2Message<GoalID>
{
   public static final java.lang.String name = "actionlib_msgs::msg::dds_::GoalID_";

   /**
      The stamp should store the time at which this goal was requested.
      It is used by an action server when it tries to preempt all
      goals that were requested before a certain time
   */
   private final builtin_interfaces.msg.dds.Time stamp_;
   /**
      The id provides a way to associate feedback and
      result message with specific goal requests. The id
      specified must be unique.
   */
   private final StringBuilder id_;

   public GoalID()
   {
      stamp_ = new builtin_interfaces.msg.dds.Time();
      id_ = new StringBuilder();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += stamp_.calculateSizeBytes(currentAlignment);
      currentAlignment += (1 * id_.length()) + CDRBuffer.alignment(currentAlignment, (1 * id_.length())); // id_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      stamp_.serialize(buffer);
      buffer.writeString(id_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      stamp_.deserialize(buffer);
      buffer.readString(id_);

   }

   @Override
   public void set(GoalID from)
   {
      stamp_.set(from.stamp_);
      id_.delete(0, id_.length());
      id_.insert(0, from.id_);

   }

   public builtin_interfaces.msg.dds.Time getstamp()
   {
      return stamp_;
   }

   public StringBuilder getid()
   {
      return id_;
   }


}