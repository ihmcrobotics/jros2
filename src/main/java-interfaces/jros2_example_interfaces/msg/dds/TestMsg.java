/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(jros2_example_interfaces/TestMsg.msg)
##################################################################################
   Header header
   std_msgs/Header header2

   int32 my_int
   string my_string # Test comment

   int32[] unbounded_integer_array
   int32[5] five_integers_array
   int32[<=5] up_to_five_integers_array

   string string_of_unbounded_size
   string<=10 up_to_ten_characters_string

   string[<=5] up_to_five_unbounded_strings
   string<=10[] unbounded_array_of_strings_up_to_ten_characters_each
   string<=10[<=5] up_to_five_strings_up_to_ten_characters_each

   uint8 x 42
   int16 y -2000
   string full_name "John Doe"
   int32[] samples [-200, -100, 0, 100, 200]

   int32 X=123
   int32 Y=-123
   string FOO="foo"
   string EXAMPLE='bar'
##################################################################################

 */
package jros2_example_interfaces.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

public class TestMsg implements ROS2Message<TestMsg>
{
   public static final java.lang.String name = "jros2_example_interfaces::msg::dds_::TestMsg_";

   private final std_msgs.msg.dds.Header header_;
   private final std_msgs.msg.dds.Header header2_;
   private int my_int_;
   private final StringBuilder my_string_; // Test comment
   private final IDLIntSequence unbounded_integer_array_;
   private final int[] five_integers_array_;
   private final IDLIntSequence up_to_five_integers_array_;
   private final StringBuilder string_of_unbounded_size_;
   private final IDLStringSequence up_to_five_unbounded_strings_;
   private byte x_;
   private short y_;
   private final StringBuilder full_name_;
   private final IDLIntSequence samples_;
   public static final int X = 123;
   public static final int Y = -123;
   public static final String FOO = "foo";
   public static final String EXAMPLE = "bar";

   public TestMsg()
   {
      header_ = new std_msgs.msg.dds.Header();
      header2_ = new std_msgs.msg.dds.Header();
      my_string_ = new StringBuilder();
      unbounded_integer_array_ = new IDLIntSequence();
      five_integers_array_ = new int[5];
      up_to_five_integers_array_ = new IDLIntSequence(5);
      string_of_unbounded_size_ = new StringBuilder();
      up_to_five_unbounded_strings_ = new IDLStringSequence(5);
      x_ = (byte) 42;
      y_ = (short) -2000;
      full_name_ = new StringBuilder("John Doe");
      samples_ = new IDLIntSequence();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += header2_.calculateSizeBytes(currentAlignment);
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // my_int_
      currentAlignment += (1 * my_string_.length()) + CDRBuffer.alignment(currentAlignment, (1 * my_string_.length())); // my_string_
      currentAlignment += unbounded_integer_array_.calculateSizeBytes(currentAlignment);
      currentAlignment += (5 * 4) + CDRBuffer.alignment(currentAlignment, (5 * 4)); // five_integers_array_
      currentAlignment += up_to_five_integers_array_.calculateSizeBytes(currentAlignment);
      currentAlignment += (1 * string_of_unbounded_size_.length()) + CDRBuffer.alignment(currentAlignment, (1 * string_of_unbounded_size_.length())); // string_of_unbounded_size_
      currentAlignment += up_to_five_unbounded_strings_.calculateSizeBytes(currentAlignment);
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // x_
      currentAlignment += 2 + CDRBuffer.alignment(currentAlignment, 2); // y_
      currentAlignment += (1 * full_name_.length()) + CDRBuffer.alignment(currentAlignment, (1 * full_name_.length())); // full_name_
      currentAlignment += samples_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      header2_.serialize(buffer);
      buffer.writeInt(my_int_);
      buffer.writeString(my_string_);
      unbounded_integer_array_.serialize(buffer);
      for (int i = 0; i < five_integers_array_.length; ++i)
      {
         buffer.writeInt(five_integers_array_[i]);
      }
      up_to_five_integers_array_.serialize(buffer);
      buffer.writeString(string_of_unbounded_size_);
      up_to_five_unbounded_strings_.serialize(buffer);
      buffer.writeByte(x_);
      buffer.writeShort(y_);
      buffer.writeString(full_name_);
      samples_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      header2_.deserialize(buffer);
      my_int_ = buffer.readInt();
      buffer.readString(my_string_);
      unbounded_integer_array_.deserialize(buffer);
      for (int i = 0; i < five_integers_array_.length; ++i)
      {
      five_integers_array_[i] = buffer.readInt();
      }
      up_to_five_integers_array_.deserialize(buffer);
      buffer.readString(string_of_unbounded_size_);
      up_to_five_unbounded_strings_.deserialize(buffer);
      x_ = buffer.readByte();
      y_ = buffer.readShort();
      buffer.readString(full_name_);
      samples_.deserialize(buffer);

   }

   @Override
   public void set(TestMsg from)
   {
      header_.set(from.header_);
      header2_.set(from.header2_);
      my_int_ = from.my_int_;
      my_string_.delete(0, my_string_.length());
      my_string_.insert(0, from.my_string_);
      unbounded_integer_array_.set(from.unbounded_integer_array_);
      for (int i = 0; i < five_integers_array_.length; ++i)
      {
         five_integers_array_[i] = from.five_integers_array_[i];
      }
      up_to_five_integers_array_.set(from.up_to_five_integers_array_);
      string_of_unbounded_size_.delete(0, string_of_unbounded_size_.length());
      string_of_unbounded_size_.insert(0, from.string_of_unbounded_size_);
      up_to_five_unbounded_strings_.set(from.up_to_five_unbounded_strings_);
      x_ = from.x_;
      y_ = from.y_;
      full_name_.delete(0, full_name_.length());
      full_name_.insert(0, from.full_name_);
      samples_.set(from.samples_);

   }

   public std_msgs.msg.dds.Header getHeader()
   {
      return header_;
   }

   public std_msgs.msg.dds.Header getHeader2()
   {
      return header2_;
   }

   public int getMyInt()
   {
      return my_int_;
   }

   public void setMyInt(int my_int_)
   {
      this.my_int_ = my_int_;
   }

   public StringBuilder getMyString()
   {
      return my_string_;
   }

   public IDLIntSequence getUnboundedIntegerArray()
   {
      return unbounded_integer_array_;
   }

   public int[] getFiveIntegersArray()
   {
      return five_integers_array_;
   }

   public IDLIntSequence getUpToFiveIntegersArray()
   {
      return up_to_five_integers_array_;
   }

   public StringBuilder getStringOfUnboundedSize()
   {
      return string_of_unbounded_size_;
   }

   public IDLStringSequence getUpToFiveUnboundedStrings()
   {
      return up_to_five_unbounded_strings_;
   }

   public byte getX()
   {
      return x_;
   }

   public void setX(byte x_)
   {
      this.x_ = x_;
   }

   public short getY()
   {
      return y_;
   }

   public void setY(short y_)
   {
      this.y_ = y_;
   }

   public StringBuilder getFullName()
   {
      return full_name_;
   }

   public IDLIntSequence getSamples()
   {
      return samples_;
   }


}