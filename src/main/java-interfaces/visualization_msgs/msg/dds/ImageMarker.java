/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(visualization_msgs/ImageMarker.msg)
##################################################################################
   int32 CIRCLE=0
   int32 LINE_STRIP=1
   int32 LINE_LIST=2
   int32 POLYGON=3
   int32 POINTS=4

   int32 ADD=0
   int32 REMOVE=1

   std_msgs/Header header
   # Namespace which is used with the id to form a unique id.
   string ns
   # Unique id within the namespace.
   int32 id
   # One of the above types, e.g. CIRCLE, LINE_STRIP, etc.
   int32 type
   # Either ADD or REMOVE.
   int32 action
   # Two-dimensional coordinate position, in pixel-coordinates.
   geometry_msgs/Point position
   # The scale of the object, e.g. the diameter for a CIRCLE.
   float32 scale
   # The outline color of the marker.
   std_msgs/ColorRGBA outline_color
   # Whether or not to fill in the shape with color.
   uint8 filled
   # Fill color; in the range: [0.0-1.0]
   std_msgs/ColorRGBA fill_color
   # How long the object should last before being automatically deleted.
   # 0 indicates forever.
   builtin_interfaces/Duration lifetime

   # Coordinates in 2D in pixel coords. Used for LINE_STRIP, LINE_LIST, POINTS, etc.
   geometry_msgs/Point[] points
   # The color for each line, point, etc. in the points field.
   std_msgs/ColorRGBA[] outline_colors

##################################################################################

 */
package visualization_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

public class ImageMarker implements ROS2Message<ImageMarker>
{
   public static final java.lang.String name = "visualization_msgs::msg::dds_::ImageMarker_";

   public static final int CIRCLE = 0;
   public static final int LINE_STRIP = 1;
   public static final int LINE_LIST = 2;
   public static final int POLYGON = 3;
   public static final int POINTS = 4;
   public static final int ADD = 0;
   public static final int REMOVE = 1;
   private final std_msgs.msg.dds.Header header_;
   /**
      Namespace which is used with the id to form a unique id.
   */
   private final StringBuilder ns_;
   /**
      Unique id within the namespace.
   */
   private int id_;
   /**
      One of the above types, e.g. CIRCLE, LINE_STRIP, etc.
   */
   private int type_;
   /**
      Either ADD or REMOVE.
   */
   private int action_;
   /**
      Two-dimensional coordinate position, in pixel-coordinates.
   */
   private final geometry_msgs.msg.dds.Point position_;
   /**
      The scale of the object, e.g. the diameter for a CIRCLE.
   */
   private float scale_;
   /**
      The outline color of the marker.
   */
   private final std_msgs.msg.dds.ColorRGBA outline_color_;
   /**
      Whether or not to fill in the shape with color.
   */
   private byte filled_;
   /**
      Fill color; in the range: [0.0-1.0]
   */
   private final std_msgs.msg.dds.ColorRGBA fill_color_;
   /**
      How long the object should last before being automatically deleted.
      0 indicates forever.
   */
   private final builtin_interfaces.msg.dds.Duration lifetime_;
   /**
      Coordinates in 2D in pixel coords. Used for LINE_STRIP, LINE_LIST, POINTS, etc.
   */
   private final IDLObjectSequence<geometry_msgs.msg.dds.Point> points_;
   /**
      The color for each line, point, etc. in the points field.
   */
   private final IDLObjectSequence<std_msgs.msg.dds.ColorRGBA> outline_colors_;

   public ImageMarker()
   {
      header_ = new std_msgs.msg.dds.Header();
      ns_ = new StringBuilder();
      position_ = new geometry_msgs.msg.dds.Point();
      outline_color_ = new std_msgs.msg.dds.ColorRGBA();
      fill_color_ = new std_msgs.msg.dds.ColorRGBA();
      lifetime_ = new builtin_interfaces.msg.dds.Duration();
      points_ = new IDLObjectSequence<geometry_msgs.msg.dds.Point>(geometry_msgs.msg.dds.Point.class);
      outline_colors_ = new IDLObjectSequence<std_msgs.msg.dds.ColorRGBA>(std_msgs.msg.dds.ColorRGBA.class);

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + (1 * ns_.length()) + 1; // ns_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // id_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // type_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // action_
      currentAlignment += position_.calculateSizeBytes(currentAlignment);
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // scale_
      currentAlignment += outline_color_.calculateSizeBytes(currentAlignment);
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // filled_
      currentAlignment += fill_color_.calculateSizeBytes(currentAlignment);
      currentAlignment += lifetime_.calculateSizeBytes(currentAlignment);
      currentAlignment += points_.calculateSizeBytes(currentAlignment);
      currentAlignment += outline_colors_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      buffer.writeString(ns_);
      buffer.writeInt(id_);
      buffer.writeInt(type_);
      buffer.writeInt(action_);
      position_.serialize(buffer);
      buffer.writeFloat(scale_);
      outline_color_.serialize(buffer);
      buffer.writeByte(filled_);
      fill_color_.serialize(buffer);
      lifetime_.serialize(buffer);
      points_.serialize(buffer);
      outline_colors_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      buffer.readString(ns_);
      id_ = buffer.readInt();
      type_ = buffer.readInt();
      action_ = buffer.readInt();
      position_.deserialize(buffer);
      scale_ = buffer.readFloat();
      outline_color_.deserialize(buffer);
      filled_ = buffer.readByte();
      fill_color_.deserialize(buffer);
      lifetime_.deserialize(buffer);
      points_.deserialize(buffer);
      outline_colors_.deserialize(buffer);

   }

   @Override
   public void set(ImageMarker from)
   {
      header_.set(from.header_);
      ns_.delete(0, ns_.length());
      ns_.insert(0, from.ns_);
      id_ = from.id_;
      type_ = from.type_;
      action_ = from.action_;
      position_.set(from.position_);
      scale_ = from.scale_;
      outline_color_.set(from.outline_color_);
      filled_ = from.filled_;
      fill_color_.set(from.fill_color_);
      lifetime_.set(from.lifetime_);
      points_.set(from.points_);
      outline_colors_.set(from.outline_colors_);

   }

   public std_msgs.msg.dds.Header getHeader()
   {
      return header_;
   }

   public StringBuilder getNs()
   {
      return ns_;
   }

   public int getId()
   {
      return id_;
   }

   public void setId(int id_)
   {
      this.id_ = id_;
   }

   public int getType()
   {
      return type_;
   }

   public void setType(int type_)
   {
      this.type_ = type_;
   }

   public int getAction()
   {
      return action_;
   }

   public void setAction(int action_)
   {
      this.action_ = action_;
   }

   public geometry_msgs.msg.dds.Point getPosition()
   {
      return position_;
   }

   public float getScale()
   {
      return scale_;
   }

   public void setScale(float scale_)
   {
      this.scale_ = scale_;
   }

   public std_msgs.msg.dds.ColorRGBA getOutlineColor()
   {
      return outline_color_;
   }

   public byte getFilled()
   {
      return filled_;
   }

   public void setFilled(byte filled_)
   {
      this.filled_ = filled_;
   }

   public std_msgs.msg.dds.ColorRGBA getFillColor()
   {
      return fill_color_;
   }

   public builtin_interfaces.msg.dds.Duration getLifetime()
   {
      return lifetime_;
   }

   public IDLObjectSequence<geometry_msgs.msg.dds.Point> getPoints()
   {
      return points_;
   }

   public IDLObjectSequence<std_msgs.msg.dds.ColorRGBA> getOutlineColors()
   {
      return outline_colors_;
   }


}