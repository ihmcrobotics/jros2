/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(visualization_msgs/InteractiveMarkerFeedback.msg)
##################################################################################
   # Time/frame info.
   std_msgs/Header header

   # Identifying string. Must be unique in the topic namespace.
   string client_id

   # Feedback message sent back from the GUI, e.g.
   # when the status of an interactive marker was modified by the user.

   # Specifies which interactive marker and control this message refers to
   string marker_name
   string control_name

   # Type of the event
   # KEEP_ALIVE: sent while dragging to keep up control of the marker
   # MENU_SELECT: a menu entry has been selected
   # BUTTON_CLICK: a button control has been clicked
   # POSE_UPDATE: the pose has been changed using one of the controls
   uint8 KEEP_ALIVE = 0
   uint8 POSE_UPDATE = 1
   uint8 MENU_SELECT = 2
   uint8 BUTTON_CLICK = 3

   uint8 MOUSE_DOWN = 4
   uint8 MOUSE_UP = 5

   uint8 event_type

   # Current pose of the marker
   # Note: Has to be valid for all feedback types.
   geometry_msgs/Pose pose

   # Contains the ID of the selected menu entry
   # Only valid for MENU_SELECT events.
   uint32 menu_entry_id

   # If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_point
   # may contain the 3 dimensional position of the event on the
   # control.  If it does, mouse_point_valid will be true.  mouse_point
   # will be relative to the frame listed in the header.
   geometry_msgs/Point mouse_point
   bool mouse_point_valid

##################################################################################

 */
package visualization_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

public class InteractiveMarkerFeedback implements ROS2Message<InteractiveMarkerFeedback>
{
   public static final java.lang.String name = "visualization_msgs::msg::dds_::InteractiveMarkerFeedback_";

   /**
      Time/frame info.
   */
   private final std_msgs.msg.dds.Header header_;
   /**
      Identifying string. Must be unique in the topic namespace.
   */
   private final StringBuilder client_id_;
   /**
      Specifies which interactive marker and control this message refers to
   */
   private final StringBuilder marker_name_;
   private final StringBuilder control_name_;
   /**
      Type of the event
      KEEP_ALIVE: sent while dragging to keep up control of the marker
      MENU_SELECT: a menu entry has been selected
      BUTTON_CLICK: a button control has been clicked
      POSE_UPDATE: the pose has been changed using one of the controls
   */
   public static final byte KEEP_ALIVE = 0;
   public static final byte POSE_UPDATE = 1;
   public static final byte MENU_SELECT = 2;
   public static final byte BUTTON_CLICK = 3;
   public static final byte MOUSE_DOWN = 4;
   public static final byte MOUSE_UP = 5;
   private byte event_type_;
   /**
      Current pose of the marker
      Note: Has to be valid for all feedback types.
   */
   private final geometry_msgs.msg.dds.Pose pose_;
   /**
      Contains the ID of the selected menu entry
      Only valid for MENU_SELECT events.
   */
   private int menu_entry_id_;
   /**
      If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_point
      may contain the 3 dimensional position of the event on the
      control.  If it does, mouse_point_valid will be true.  mouse_point
      will be relative to the frame listed in the header.
   */
   private final geometry_msgs.msg.dds.Point mouse_point_;
   private boolean mouse_point_valid_;

   public InteractiveMarkerFeedback()
   {
      header_ = new std_msgs.msg.dds.Header();
      client_id_ = new StringBuilder();
      marker_name_ = new StringBuilder();
      control_name_ = new StringBuilder();
      pose_ = new geometry_msgs.msg.dds.Pose();
      mouse_point_ = new geometry_msgs.msg.dds.Point();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + (1 * client_id_.length()) + 1; // client_id_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + (1 * marker_name_.length()) + 1; // marker_name_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + (1 * control_name_.length()) + 1; // control_name_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // event_type_
      currentAlignment += pose_.calculateSizeBytes(currentAlignment);
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // menu_entry_id_
      currentAlignment += mouse_point_.calculateSizeBytes(currentAlignment);
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // mouse_point_valid_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      buffer.writeString(client_id_);
      buffer.writeString(marker_name_);
      buffer.writeString(control_name_);
      buffer.writeByte(event_type_);
      pose_.serialize(buffer);
      buffer.writeInt(menu_entry_id_);
      mouse_point_.serialize(buffer);
      buffer.writeBoolean(mouse_point_valid_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      buffer.readString(client_id_);
      buffer.readString(marker_name_);
      buffer.readString(control_name_);
      event_type_ = buffer.readByte();
      pose_.deserialize(buffer);
      menu_entry_id_ = buffer.readInt();
      mouse_point_.deserialize(buffer);
      mouse_point_valid_ = buffer.readBoolean();

   }

   @Override
   public void set(InteractiveMarkerFeedback from)
   {
      header_.set(from.header_);
      client_id_.delete(0, client_id_.length());
      client_id_.insert(0, from.client_id_);
      marker_name_.delete(0, marker_name_.length());
      marker_name_.insert(0, from.marker_name_);
      control_name_.delete(0, control_name_.length());
      control_name_.insert(0, from.control_name_);
      event_type_ = from.event_type_;
      pose_.set(from.pose_);
      menu_entry_id_ = from.menu_entry_id_;
      mouse_point_.set(from.mouse_point_);
      mouse_point_valid_ = from.mouse_point_valid_;

   }

   public std_msgs.msg.dds.Header getHeader()
   {
      return header_;
   }

   public StringBuilder getClientId()
   {
      return client_id_;
   }

   public StringBuilder getMarkerName()
   {
      return marker_name_;
   }

   public StringBuilder getControlName()
   {
      return control_name_;
   }

   public byte getEventType()
   {
      return event_type_;
   }

   public void setEventType(byte event_type_)
   {
      this.event_type_ = event_type_;
   }

   public geometry_msgs.msg.dds.Pose getPose()
   {
      return pose_;
   }

   public int getMenuEntryId()
   {
      return menu_entry_id_;
   }

   public void setMenuEntryId(int menu_entry_id_)
   {
      this.menu_entry_id_ = menu_entry_id_;
   }

   public geometry_msgs.msg.dds.Point getMousePoint()
   {
      return mouse_point_;
   }

   public boolean getMousePointValid()
   {
      return mouse_point_valid_;
   }

   public void setMousePointValid(boolean mouse_point_valid_)
   {
      this.mouse_point_valid_ = mouse_point_valid_;
   }


}