/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
(lifecycle_msgs/TransitionEvent.msg):
##################################################################################
        # The time point at which this event occurred.
        uint64 timestamp

        # The id and label of this transition event.
        Transition transition

        # The starting state from which this event transitioned.
        State start_state

        # The end state of this transition event.
        State goal_state

##################################################################################

 */
package lifecycle_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

public class TransitionEvent implements ROS2Message<TransitionEvent>
{
   public static final java.lang.String name = "lifecycle_msgs::msg::dds_::TransitionEvent_";

   /**
      The time point at which this event occurred.
   */
   private long timestamp_;
   /**
      The id and label of this transition event.
   */
   private final lifecycle_msgs.msg.dds.Transition transition_;
   /**
      The starting state from which this event transitioned.
   */
   private final lifecycle_msgs.msg.dds.State start_state_;
   /**
      The end state of this transition event.
   */
   private final lifecycle_msgs.msg.dds.State goal_state_;

   public TransitionEvent()
   {
      transition_ = new lifecycle_msgs.msg.dds.Transition();
      start_state_ = new lifecycle_msgs.msg.dds.State();
      goal_state_ = new lifecycle_msgs.msg.dds.State();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // timestamp_
      currentAlignment += transition_.calculateSizeBytes(currentAlignment);
      currentAlignment += start_state_.calculateSizeBytes(currentAlignment);
      currentAlignment += goal_state_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeLong(timestamp_);
      transition_.serialize(buffer);
      start_state_.serialize(buffer);
      goal_state_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      timestamp_ = buffer.readLong();
      transition_.deserialize(buffer);
      start_state_.deserialize(buffer);
      goal_state_.deserialize(buffer);

   }

   @Override
   public void set(TransitionEvent from)
   {
      timestamp_ = from.timestamp_;
      transition_.set(from.transition_);
      start_state_.set(from.start_state_);
      goal_state_.set(from.goal_state_);

   }

   public long gettimestamp()
   {
      return timestamp_;
   }

   public void settimestamp(long timestamp_)
   {
      this.timestamp_ = timestamp_;
   }

   public lifecycle_msgs.msg.dds.Transition gettransition()
   {
      return transition_;
   }

   public lifecycle_msgs.msg.dds.State getstart_state()
   {
      return start_state_;
   }

   public lifecycle_msgs.msg.dds.State getgoal_state()
   {
      return goal_state_;
   }


}