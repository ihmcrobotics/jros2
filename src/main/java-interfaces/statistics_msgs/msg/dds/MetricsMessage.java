/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(statistics_msgs/MetricsMessage.msg)
##################################################################################
   #############################################
   # A generic metrics message providing statistics for measurements from different sources. For example,
   # measure a system's CPU % for a given window yields the following data points over a window of time:
   #
   #   - average cpu %
   #   - std deviation
   #   - min
   #   - max
   #   - sample count
   #
   # These are all represented as different 'StatisticDataPoint's.
   #############################################

   # Name metric measurement source, e.g., node, topic, or process name
   string measurement_source_name

   # Name of the metric being measured, e.g. cpu_percentage, free_memory_mb, message_age, etc.
   string metrics_source

   # Unit of measure of the metric, e.g. percent, mb, seconds, etc.
   string unit

   # Measurement window start time
   builtin_interfaces/Time window_start

   # Measurement window end time
   builtin_interfaces/Time window_stop

   # A list of statistics data point, defined in StatisticDataPoint.msg
   StatisticDataPoint[] statistics

##################################################################################

 */
package statistics_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   ############################################
   A generic metrics message providing statistics for measurements from different sources. For example,
   measure a system's CPU % for a given window yields the following data points over a window of time:

   - average cpu %
   - std deviation
   - min
   - max
   - sample count

   These are all represented as different 'StatisticDataPoint's.
   ############################################
*/
public class MetricsMessage implements ROS2Message<MetricsMessage>
{
   public static final java.lang.String name = "statistics_msgs::msg::dds_::MetricsMessage_";

   /**
      Name metric measurement source, e.g., node, topic, or process name
   */
   private final StringBuilder measurement_source_name_;
   /**
      Name of the metric being measured, e.g. cpu_percentage, free_memory_mb, message_age, etc.
   */
   private final StringBuilder metrics_source_;
   /**
      Unit of measure of the metric, e.g. percent, mb, seconds, etc.
   */
   private final StringBuilder unit_;
   /**
      Measurement window start time
   */
   private final builtin_interfaces.msg.dds.Time window_start_;
   /**
      Measurement window end time
   */
   private final builtin_interfaces.msg.dds.Time window_stop_;
   /**
      A list of statistics data point, defined in StatisticDataPoint.msg
   */
   private final IDLObjectSequence<statistics_msgs.msg.dds.StatisticDataPoint> statistics_;

   public MetricsMessage()
   {
      measurement_source_name_ = new StringBuilder();
      metrics_source_ = new StringBuilder();
      unit_ = new StringBuilder();
      window_start_ = new builtin_interfaces.msg.dds.Time();
      window_stop_ = new builtin_interfaces.msg.dds.Time();
      statistics_ = new IDLObjectSequence<statistics_msgs.msg.dds.StatisticDataPoint>(statistics_msgs.msg.dds.StatisticDataPoint.class);

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += (1 * measurement_source_name_.length()) + CDRBuffer.alignment(currentAlignment, (1 * measurement_source_name_.length())); // measurement_source_name_
      currentAlignment += (1 * metrics_source_.length()) + CDRBuffer.alignment(currentAlignment, (1 * metrics_source_.length())); // metrics_source_
      currentAlignment += (1 * unit_.length()) + CDRBuffer.alignment(currentAlignment, (1 * unit_.length())); // unit_
      currentAlignment += window_start_.calculateSizeBytes(currentAlignment);
      currentAlignment += window_stop_.calculateSizeBytes(currentAlignment);
      currentAlignment += statistics_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeString(measurement_source_name_);
      buffer.writeString(metrics_source_);
      buffer.writeString(unit_);
      window_start_.serialize(buffer);
      window_stop_.serialize(buffer);
      statistics_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      buffer.readString(measurement_source_name_);
      buffer.readString(metrics_source_);
      buffer.readString(unit_);
      window_start_.deserialize(buffer);
      window_stop_.deserialize(buffer);
      statistics_.deserialize(buffer);

   }

   @Override
   public void set(MetricsMessage from)
   {
      measurement_source_name_.delete(0, measurement_source_name_.length());
      measurement_source_name_.insert(0, from.measurement_source_name_);
      metrics_source_.delete(0, metrics_source_.length());
      metrics_source_.insert(0, from.metrics_source_);
      unit_.delete(0, unit_.length());
      unit_.insert(0, from.unit_);
      window_start_.set(from.window_start_);
      window_stop_.set(from.window_stop_);
      statistics_.set(from.statistics_);

   }

   public StringBuilder getmeasurement_source_name()
   {
      return measurement_source_name_;
   }

   public StringBuilder getmetrics_source()
   {
      return metrics_source_;
   }

   public StringBuilder getunit()
   {
      return unit_;
   }

   public builtin_interfaces.msg.dds.Time getwindow_start()
   {
      return window_start_;
   }

   public builtin_interfaces.msg.dds.Time getwindow_stop()
   {
      return window_stop_;
   }

   public IDLObjectSequence<statistics_msgs.msg.dds.StatisticDataPoint> getstatistics()
   {
      return statistics_;
   }


}