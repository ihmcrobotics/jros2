/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
(diagnostic_msgs/DiagnosticArray.msg):
##################################################################################
   # This message is used to send diagnostic information about the state of the robot.
   std_msgs/Header header # for timestamp
   DiagnosticStatus[] status # an array of components being reported on

##################################################################################

 */
package diagnostic_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

public class DiagnosticArray implements ROS2Message<DiagnosticArray>
{
   public static final java.lang.String name = "diagnostic_msgs::msg::dds_::DiagnosticArray_";

   /**
      This message is used to send diagnostic information about the state of the robot.
   */
   private final std_msgs.msg.dds.Header header_;
   private final IDLObjectSequence<diagnostic_msgs.msg.dds.DiagnosticStatus> status_;

   public DiagnosticArray()
   {
      header_ = new std_msgs.msg.dds.Header();
      status_ = new IDLObjectSequence<diagnostic_msgs.msg.dds.DiagnosticStatus>(diagnostic_msgs.msg.dds.DiagnosticStatus.class);

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += status_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      status_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      status_.deserialize(buffer);

   }

   @Override
   public void set(DiagnosticArray from)
   {
      header_.set(from.header_);
      status_.set(from.status_);

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public IDLObjectSequence<diagnostic_msgs.msg.dds.DiagnosticStatus> getstatus()
   {
      return status_;
   }


}