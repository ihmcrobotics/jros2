/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(diagnostic_msgs/DiagnosticStatus.msg)
##################################################################################
   # This message holds the status of an individual component of the robot.

   # Possible levels of operations.
   byte OK=0
   byte WARN=1
   byte ERROR=2
   byte STALE=3

   # Level of operation enumerated above.
   byte level
   # A description of the test/component reporting.
   string name
   # A description of the status.
   string message
   # A hardware unique string.
   string hardware_id
   # An array of values associated with the status.
   KeyValue[] values


##################################################################################

 */
package diagnostic_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This message holds the status of an individual component of the robot.
*/
public class DiagnosticStatus implements ROS2Message<DiagnosticStatus>
{
   public static final java.lang.String name = "diagnostic_msgs::msg::dds_::DiagnosticStatus_";

   /**
      Possible levels of operations.
   */
   public static final byte OK = 0;
   public static final byte WARN = 1;
   public static final byte ERROR = 2;
   public static final byte STALE = 3;
   /**
      Level of operation enumerated above.
   */
   private byte level_;
   /**
      A description of the test/component reporting.
   */
   private final StringBuilder name_;
   /**
      A description of the status.
   */
   private final StringBuilder message_;
   /**
      A hardware unique string.
   */
   private final StringBuilder hardware_id_;
   /**
      An array of values associated with the status.
   */
   private final IDLObjectSequence<diagnostic_msgs.msg.dds.KeyValue> values_;

   public DiagnosticStatus()
   {
      name_ = new StringBuilder();
      message_ = new StringBuilder();
      hardware_id_ = new StringBuilder();
      values_ = new IDLObjectSequence<diagnostic_msgs.msg.dds.KeyValue>(diagnostic_msgs.msg.dds.KeyValue.class);

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // level_
      currentAlignment += (1 * name_.length()) + CDRBuffer.alignment(currentAlignment, (1 * name_.length())); // name_
      currentAlignment += (1 * message_.length()) + CDRBuffer.alignment(currentAlignment, (1 * message_.length())); // message_
      currentAlignment += (1 * hardware_id_.length()) + CDRBuffer.alignment(currentAlignment, (1 * hardware_id_.length())); // hardware_id_
      currentAlignment += values_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeByte(level_);
      buffer.writeString(name_);
      buffer.writeString(message_);
      buffer.writeString(hardware_id_);
      values_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      level_ = buffer.readByte();
      buffer.readString(name_);
      buffer.readString(message_);
      buffer.readString(hardware_id_);
      values_.deserialize(buffer);

   }

   @Override
   public void set(DiagnosticStatus from)
   {
      level_ = from.level_;
      name_.delete(0, name_.length());
      name_.insert(0, from.name_);
      message_.delete(0, message_.length());
      message_.insert(0, from.message_);
      hardware_id_.delete(0, hardware_id_.length());
      hardware_id_.insert(0, from.hardware_id_);
      values_.set(from.values_);

   }

   public byte getLevel()
   {
      return level_;
   }

   public void setLevel(byte level_)
   {
      this.level_ = level_;
   }

   public StringBuilder getName()
   {
      return name_;
   }

   public StringBuilder getMessage()
   {
      return message_;
   }

   public StringBuilder getHardwareId()
   {
      return hardware_id_;
   }

   public IDLObjectSequence<diagnostic_msgs.msg.dds.KeyValue> getValues()
   {
      return values_;
   }


}