/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(rcl_interfaces/Log.msg)
##################################################################################
   ##
   ## Severity level constants
   ## 
   ## These logging levels follow the Python Standard
   ## https://docs.python.org/3/library/logging.html#logging-levels
   ## And are implemented in rcutils as well
   ## https://github.com/ros2/rcutils/blob/35f29850064e0c33a4063cbc947ebbfeada11dba/include/rcutils/logging.h#L164-L172
   ## This leaves space for other standard logging levels to be inserted in the middle in the future,
   ## as well as custom user defined levels.
   ## Since there are several other logging enumeration standard for different implementations,
   ## other logging implementations may need to provide level mappings to match their internal implementations.
   ##

   # Debug is for pedantic information, which is useful when debugging issues.
   byte DEBUG=10

   # Info is the standard informational level and is used to report expected
   # information.
   byte INFO=20

   # Warning is for information that may potentially cause issues or possibly unexpected
   # behavior.
   byte WARN=30

   # Error is for information that this node cannot resolve.
   byte ERROR=40

   # Information about a impending node shutdown.
   byte FATAL=50

   ##
   ## Fields
   ##

   # Timestamp when this message was generated by the node.
   builtin_interfaces/Time stamp

   # Corresponding log level, see above definitions.
   uint8 level

   # The name representing the logger this message came from.
   string name

   # The full log message.
   string msg

   # The file the message came from.
   string file

   # The function the message came from.
   string function

   # The line in the file the message came from.
   uint32 line

##################################################################################

 */
package rcl_interfaces.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   #
   # Severity level constants
   #
   # These logging levels follow the Python Standard
   # https://docs.python.org/3/library/logging.html#logging-levels
   # And are implemented in rcutils as well
   # https://github.com/ros2/rcutils/blob/35f29850064e0c33a4063cbc947ebbfeada11dba/include/rcutils/logging.h#L164-L172
   # This leaves space for other standard logging levels to be inserted in the middle in the future,
   # as well as custom user defined levels.
   # Since there are several other logging enumeration standard for different implementations,
   # other logging implementations may need to provide level mappings to match their internal implementations.
   #
*/
public class Log implements ROS2Message<Log>
{
   public static final java.lang.String name = "rcl_interfaces::msg::dds_::Log_";

   /**
      Debug is for pedantic information, which is useful when debugging issues.
   */
   public static final byte DEBUG = 10;
   /**
      Info is the standard informational level and is used to report expected
      information.
   */
   public static final byte INFO = 20;
   /**
      Warning is for information that may potentially cause issues or possibly unexpected
      behavior.
   */
   public static final byte WARN = 30;
   /**
      Error is for information that this node cannot resolve.
   */
   public static final byte ERROR = 40;
   /**
      Information about a impending node shutdown.
   */
   public static final byte FATAL = 50;
   /**
      Timestamp when this message was generated by the node.
   */
   private final builtin_interfaces.msg.dds.Time stamp_;
   /**
      Corresponding log level, see above definitions.
   */
   private byte level_;
   /**
      The name representing the logger this message came from.
   */
   private final StringBuilder name_;
   /**
      The full log message.
   */
   private final StringBuilder msg_;
   /**
      The file the message came from.
   */
   private final StringBuilder file_;
   /**
      The function the message came from.
   */
   private final StringBuilder function_;
   /**
      The line in the file the message came from.
   */
   private int line_;

   public Log()
   {
      stamp_ = new builtin_interfaces.msg.dds.Time();
      name_ = new StringBuilder();
      msg_ = new StringBuilder();
      file_ = new StringBuilder();
      function_ = new StringBuilder();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += stamp_.calculateSizeBytes(currentAlignment);
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // level_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + name_.length() + 1; // name_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + msg_.length() + 1; // msg_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + file_.length() + 1; // file_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + function_.length() + 1; // function_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // line_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      stamp_.serialize(buffer);
      buffer.writeByte(level_);
      buffer.writeString(name_);
      buffer.writeString(msg_);
      buffer.writeString(file_);
      buffer.writeString(function_);
      buffer.writeInt(line_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      stamp_.deserialize(buffer);
      level_ = buffer.readByte();
      buffer.readString(name_);
      buffer.readString(msg_);
      buffer.readString(file_);
      buffer.readString(function_);
      line_ = buffer.readInt();

   }

   @Override
   public void set(Log from)
   {
      stamp_.set(from.stamp_);
      level_ = from.level_;
      name_.delete(0, name_.length());
      name_.insert(0, from.name_);
      msg_.delete(0, msg_.length());
      msg_.insert(0, from.msg_);
      file_.delete(0, file_.length());
      file_.insert(0, from.file_);
      function_.delete(0, function_.length());
      function_.insert(0, from.function_);
      line_ = from.line_;

   }

   public builtin_interfaces.msg.dds.Time getStamp()
   {
      return stamp_;
   }

   public byte getLevel()
   {
      return level_;
   }

   public void setLevel(byte level_)
   {
      this.level_ = level_;
   }

   public StringBuilder getName()
   {
      return name_;
   }

   public StringBuilder getMsg()
   {
      return msg_;
   }

   public StringBuilder getFile()
   {
      return file_;
   }

   public StringBuilder getFunction()
   {
      return function_;
   }

   public int getLine()
   {
      return line_;
   }

   public void setLine(int line_)
   {
      this.line_ = line_;
   }


}