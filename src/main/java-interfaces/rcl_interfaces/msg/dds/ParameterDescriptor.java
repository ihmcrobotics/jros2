/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(rcl_interfaces/ParameterDescriptor.msg)
##################################################################################
   # This is the message to communicate a parameter's descriptor.

   # The name of the parameter.
   string name

   # Enum values are defined in the `ParameterType.msg` message.
   uint8 type

   # Description of the parameter, visible from introspection tools.
   string description

   # Parameter constraints

   # Plain English description of additional constraints which cannot be expressed
   # with the available constraints, e.g. "only prime numbers".
   #
   # By convention, this should only be used to clarify constraints which cannot
   # be completely expressed with the parameter constraints below.
   string additional_constraints

   # If 'true' then the value cannot change after it has been initialized.
   bool read_only false

   # If true, the parameter is allowed to change type.
   bool dynamic_typing false

   # If any of the following sequences are not empty, then the constraint inside of
   # them apply to this parameter.
   #
   # FloatingPointRange and IntegerRange are mutually exclusive.

   # FloatingPointRange consists of a from_value, a to_value, and a step.
   FloatingPointRange[<=1] floating_point_range

   # IntegerRange consists of a from_value, a to_value, and a step.
   IntegerRange[<=1] integer_range

##################################################################################

 */
package rcl_interfaces.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This is the message to communicate a parameter's descriptor.
*/
public class ParameterDescriptor implements ROS2Message<ParameterDescriptor>
{
   public static final java.lang.String name = "rcl_interfaces::msg::dds_::ParameterDescriptor_";

   /**
      The name of the parameter.
   */
   private final StringBuilder name_;
   /**
      Enum values are defined in the `ParameterType.msg` message.
   */
   private byte type_;
   /**
      Description of the parameter, visible from introspection tools.
   */
   private final StringBuilder description_;
   /**
      Plain English description of additional constraints which cannot be expressed
      with the available constraints, e.g. "only prime numbers".

      By convention, this should only be used to clarify constraints which cannot
      be completely expressed with the parameter constraints below.
   */
   private final StringBuilder additional_constraints_;
   /**
      If 'true' then the value cannot change after it has been initialized.
   */
   private boolean read_only_;
   /**
      If true, the parameter is allowed to change type.
   */
   private boolean dynamic_typing_;
   /**
      FloatingPointRange consists of a from_value, a to_value, and a step.
   */
   private final IDLObjectSequence<rcl_interfaces.msg.dds.FloatingPointRange> floating_point_range_;
   /**
      IntegerRange consists of a from_value, a to_value, and a step.
   */
   private final IDLObjectSequence<rcl_interfaces.msg.dds.IntegerRange> integer_range_;

   public ParameterDescriptor()
   {
      name_ = new StringBuilder();
      description_ = new StringBuilder();
      additional_constraints_ = new StringBuilder();
      read_only_ = (boolean) false;
      dynamic_typing_ = (boolean) false;
      floating_point_range_ = new IDLObjectSequence<rcl_interfaces.msg.dds.FloatingPointRange>(1, rcl_interfaces.msg.dds.FloatingPointRange.class);
      integer_range_ = new IDLObjectSequence<rcl_interfaces.msg.dds.IntegerRange>(1, rcl_interfaces.msg.dds.IntegerRange.class);

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + name_.length() + 1; // name_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // type_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + description_.length() + 1; // description_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + additional_constraints_.length() + 1; // additional_constraints_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // read_only_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // dynamic_typing_
      currentAlignment += floating_point_range_.calculateSizeBytes(currentAlignment);
      currentAlignment += integer_range_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeString(name_);
      buffer.writeByte(type_);
      buffer.writeString(description_);
      buffer.writeString(additional_constraints_);
      buffer.writeBoolean(read_only_);
      buffer.writeBoolean(dynamic_typing_);
      floating_point_range_.serialize(buffer);
      integer_range_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      buffer.readString(name_);
      type_ = buffer.readByte();
      buffer.readString(description_);
      buffer.readString(additional_constraints_);
      read_only_ = buffer.readBoolean();
      dynamic_typing_ = buffer.readBoolean();
      floating_point_range_.deserialize(buffer);
      integer_range_.deserialize(buffer);

   }

   @Override
   public void set(ParameterDescriptor from)
   {
      name_.delete(0, name_.length());
      name_.insert(0, from.name_);
      type_ = from.type_;
      description_.delete(0, description_.length());
      description_.insert(0, from.description_);
      additional_constraints_.delete(0, additional_constraints_.length());
      additional_constraints_.insert(0, from.additional_constraints_);
      read_only_ = from.read_only_;
      dynamic_typing_ = from.dynamic_typing_;
      floating_point_range_.set(from.floating_point_range_);
      integer_range_.set(from.integer_range_);

   }

   public StringBuilder getName()
   {
      return name_;
   }

   public byte getType()
   {
      return type_;
   }

   public void setType(byte type_)
   {
      this.type_ = type_;
   }

   public StringBuilder getDescription()
   {
      return description_;
   }

   public StringBuilder getAdditionalConstraints()
   {
      return additional_constraints_;
   }

   public boolean getReadOnly()
   {
      return read_only_;
   }

   public void setReadOnly(boolean read_only_)
   {
      this.read_only_ = read_only_;
   }

   public boolean getDynamicTyping()
   {
      return dynamic_typing_;
   }

   public void setDynamicTyping(boolean dynamic_typing_)
   {
      this.dynamic_typing_ = dynamic_typing_;
   }

   public IDLObjectSequence<rcl_interfaces.msg.dds.FloatingPointRange> getFloatingPointRange()
   {
      return floating_point_range_;
   }

   public IDLObjectSequence<rcl_interfaces.msg.dds.IntegerRange> getIntegerRange()
   {
      return integer_range_;
   }


}