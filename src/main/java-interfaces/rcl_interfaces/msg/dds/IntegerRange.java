/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(rcl_interfaces/IntegerRange.msg)
##################################################################################
   # Represents bounds and a step value for an integer typed parameter.

   # Start value for valid values, inclusive.
   int64 from_value

   # End value for valid values, inclusive.
   int64 to_value

   # Size of valid steps between the from and to bound.
   #
   # A step value of zero implies a continuous range of values. Ideally, the step
   # would be less than or equal to the distance between the bounds, as well as an
   # even multiple of the distance between the bounds, but neither are required.
   #
   # If the absolute value of the step is larger than or equal to the distance
   # between the two bounds, then the bounds will be the only valid values. e.g. if
   # the range is defined as {from_value: 1, to_value: 2, step: 5} then the valid
   # values will be 1 and 2.
   # 
   # If the step is less than the distance between the bounds, but the distance is
   # not a multiple of the step, then the "to" bound will always be a valid value,
   # e.g. if the range is defined as {from_value: 2, to_value: 5, step: 2} then
   # the valid values will be 2, 4, and 5.
   uint64 step

##################################################################################

 */
package rcl_interfaces.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   Represents bounds and a step value for an integer typed parameter.
*/
public class IntegerRange implements ROS2Message<IntegerRange>
{
   public static final java.lang.String name = "rcl_interfaces::msg::dds_::IntegerRange_";

   /**
      Start value for valid values, inclusive.
   */
   private long from_value_;
   /**
      End value for valid values, inclusive.
   */
   private long to_value_;
   /**
      Size of valid steps between the from and to bound.

      A step value of zero implies a continuous range of values. Ideally, the step
      would be less than or equal to the distance between the bounds, as well as an
      even multiple of the distance between the bounds, but neither are required.

      If the absolute value of the step is larger than or equal to the distance
      between the two bounds, then the bounds will be the only valid values. e.g. if
      the range is defined as {from_value: 1, to_value: 2, step: 5} then the valid
      values will be 1 and 2.

      If the step is less than the distance between the bounds, but the distance is
      not a multiple of the step, then the "to" bound will always be a valid value,
      e.g. if the range is defined as {from_value: 2, to_value: 5, step: 2} then
      the valid values will be 2, 4, and 5.
   */
   private long step_;

   public IntegerRange()
   {
   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // from_value_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // to_value_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // step_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeLong(from_value_);
      buffer.writeLong(to_value_);
      buffer.writeLong(step_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      from_value_ = buffer.readLong();
      to_value_ = buffer.readLong();
      step_ = buffer.readLong();

   }

   @Override
   public void set(IntegerRange from)
   {
      from_value_ = from.from_value_;
      to_value_ = from.to_value_;
      step_ = from.step_;

   }

   public long getfrom_value()
   {
      return from_value_;
   }

   public void setfrom_value(long from_value_)
   {
      this.from_value_ = from_value_;
   }

   public long getto_value()
   {
      return to_value_;
   }

   public void setto_value(long to_value_)
   {
      this.to_value_ = to_value_;
   }

   public long getstep()
   {
      return step_;
   }

   public void setstep(long step_)
   {
      this.step_ = step_;
   }


}