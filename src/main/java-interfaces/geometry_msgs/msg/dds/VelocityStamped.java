/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(geometry_msgs/VelocityStamped.msg)
##################################################################################
   # This expresses the timestamped velocity vector of a frame 'body_frame_id' in the reference frame 'reference_frame_id' expressed from arbitrary observation frame 'header.frame_id'.
   # - If the 'body_frame_id' and 'header.frame_id' are identical, the velocity is observed and defined in the local coordinates system of the body
   #   which is the usual use-case in mobile robotics and is also known as a body twist.

   std_msgs/Header header
   string body_frame_id
   string reference_frame_id
   Twist velocity

##################################################################################

 */
package geometry_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This expresses the timestamped velocity vector of a frame 'body_frame_id' in the reference frame 'reference_frame_id' expressed from arbitrary observation frame 'header.frame_id'.
   - If the 'body_frame_id' and 'header.frame_id' are identical, the velocity is observed and defined in the local coordinates system of the body
   which is the usual use-case in mobile robotics and is also known as a body twist.
*/
public class VelocityStamped implements ROS2Message<VelocityStamped>
{
   public static final java.lang.String name = "geometry_msgs::msg::dds_::VelocityStamped_";

   private final std_msgs.msg.dds.Header header_;
   private final StringBuilder body_frame_id_;
   private final StringBuilder reference_frame_id_;
   private final geometry_msgs.msg.dds.Twist velocity_;

   public VelocityStamped()
   {
      header_ = new std_msgs.msg.dds.Header();
      body_frame_id_ = new StringBuilder();
      reference_frame_id_ = new StringBuilder();
      velocity_ = new geometry_msgs.msg.dds.Twist();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + (1 * body_frame_id_.length()) + 1; // body_frame_id_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4) + (1 * reference_frame_id_.length()) + 1; // reference_frame_id_
      currentAlignment += velocity_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      buffer.writeString(body_frame_id_);
      buffer.writeString(reference_frame_id_);
      velocity_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      buffer.readString(body_frame_id_);
      buffer.readString(reference_frame_id_);
      velocity_.deserialize(buffer);

   }

   @Override
   public void set(VelocityStamped from)
   {
      header_.set(from.header_);
      body_frame_id_.delete(0, body_frame_id_.length());
      body_frame_id_.insert(0, from.body_frame_id_);
      reference_frame_id_.delete(0, reference_frame_id_.length());
      reference_frame_id_.insert(0, from.reference_frame_id_);
      velocity_.set(from.velocity_);

   }

   public std_msgs.msg.dds.Header getHeader()
   {
      return header_;
   }

   public StringBuilder getBodyFrameId()
   {
      return body_frame_id_;
   }

   public StringBuilder getReferenceFrameId()
   {
      return reference_frame_id_;
   }

   public geometry_msgs.msg.dds.Twist getVelocity()
   {
      return velocity_;
   }


}