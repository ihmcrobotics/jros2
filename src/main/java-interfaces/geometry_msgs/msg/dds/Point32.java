/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(geometry_msgs/Point32.msg)
##################################################################################
   # This contains the position of a point in free space(with 32 bits of precision).
   # It is recommended to use Point wherever possible instead of Point32.
   #
   # This recommendation is to promote interoperability.
   #
   # This message is designed to take up less space when sending
   # lots of points at once, as in the case of a PointCloud.

   float32 x
   float32 y
   float32 z

##################################################################################

 */
package geometry_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This contains the position of a point in free space(with 32 bits of precision).
   It is recommended to use Point wherever possible instead of Point32.

   This recommendation is to promote interoperability.

   This message is designed to take up less space when sending
   lots of points at once, as in the case of a PointCloud.
*/
public class Point32 implements ROS2Message<Point32>
{
   public static final java.lang.String name = "geometry_msgs::msg::dds_::Point32_";

   private float x_;
   private float y_;
   private float z_;

   public Point32()
   {
   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // x_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // y_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // z_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeFloat(x_);
      buffer.writeFloat(y_);
      buffer.writeFloat(z_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      x_ = buffer.readFloat();
      y_ = buffer.readFloat();
      z_ = buffer.readFloat();

   }

   @Override
   public void set(Point32 from)
   {
      x_ = from.x_;
      y_ = from.y_;
      z_ = from.z_;

   }

   public float getX()
   {
      return x_;
   }

   public void setX(float x_)
   {
      this.x_ = x_;
   }

   public float getY()
   {
      return y_;
   }

   public void setY(float y_)
   {
      this.y_ = y_;
   }

   public float getZ()
   {
      return z_;
   }

   public void setZ(float z_)
   {
      this.z_ = z_;
   }


}