/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(geometry_msgs/Pose2D.msg)
##################################################################################
   # Deprecated as of Foxy and will potentially be removed in any following release.
   # Please use the full 3D pose.

   # In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

   # If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.# This expresses a position and orientation on a 2D manifold.

   float64 x
   float64 y
   float64 theta

##################################################################################

 */
package geometry_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.# This expresses a position and orientation on a 2D manifold.
*/
public class Pose2D implements ROS2Message<Pose2D>
{
   public static final java.lang.String name = "geometry_msgs::msg::dds_::Pose2D_";

   private double x_;
   private double y_;
   private double theta_;

   public Pose2D()
   {
   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // x_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // y_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // theta_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeDouble(x_);
      buffer.writeDouble(y_);
      buffer.writeDouble(theta_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      x_ = buffer.readDouble();
      y_ = buffer.readDouble();
      theta_ = buffer.readDouble();

   }

   @Override
   public void set(Pose2D from)
   {
      x_ = from.x_;
      y_ = from.y_;
      theta_ = from.theta_;

   }

   public double getX()
   {
      return x_;
   }

   public void setX(double x_)
   {
      this.x_ = x_;
   }

   public double getY()
   {
      return y_;
   }

   public void setY(double y_)
   {
      this.y_ = y_;
   }

   public double getTheta()
   {
      return theta_;
   }

   public void setTheta(double theta_)
   {
      this.theta_ = theta_;
   }


}