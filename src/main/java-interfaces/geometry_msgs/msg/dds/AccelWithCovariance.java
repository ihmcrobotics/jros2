/*
 * This class was automatically generated by jros2
 */
package geometry_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This expresses acceleration in free space with uncertainty.
*/
public class AccelWithCovariance implements ROS2Message<AccelWithCovariance>
{
   public static final java.lang.String name = "geometry_msgs::msg::dds_::AccelWithCovariance_";

   private final geometry_msgs.msg.dds.Accel accel_;
   /**
      Row-major representation of the 6x6 covariance matrix
      The orientation parameters use a fixed-axis representation.
      In order, the parameters are:
      (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
   */
   private final double[] covariance_;

   public AccelWithCovariance()
   {
      accel_ = new geometry_msgs.msg.dds.Accel();
      covariance_ = new double[36];

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += accel_.calculateSizeBytes(currentAlignment);
      currentAlignment += (36 * 8) + CDRBuffer.alignment(currentAlignment, (36 * 8)); // covariance_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      accel_.serialize(buffer);
      for (int i = 0; i < covariance_.length; ++i)
      {
         buffer.writeDouble(covariance_[i]);
      }

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      accel_.deserialize(buffer);
      for (int i = 0; i < covariance_.length; ++i)
      {
      covariance_[i] = buffer.readDouble();
      }

   }

   @Override
   public void set(AccelWithCovariance from)
   {
      accel_.set(from.accel_);
      for (int i = 0; i < covariance_.length; ++i)
      {
         covariance_[i] = from.covariance_[i];
      }

   }

   public geometry_msgs.msg.dds.Accel getaccel()
   {
      return accel_;
   }

   public double[] getcovariance()
   {
      return covariance_;
   }


}