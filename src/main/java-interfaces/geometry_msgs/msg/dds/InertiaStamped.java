/*
 * This class was automatically generated by jros2
 */
package geometry_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   An Inertia with a time stamp and reference frame.
*/
public class InertiaStamped implements ROS2Message<InertiaStamped>
{
   public static final java.lang.String name = "geometry_msgs::msg::dds_::InertiaStamped_";

   private final std_msgs.msg.dds.Header header_;
   private final geometry_msgs.msg.dds.Inertia inertia_;

   public InertiaStamped()
   {
      header_ = new std_msgs.msg.dds.Header();
      inertia_ = new geometry_msgs.msg.dds.Inertia();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += inertia_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      inertia_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      inertia_.deserialize(buffer);

   }

   @Override
   public void set(InertiaStamped from)
   {
      header_.set(from.header_);
      inertia_.set(from.inertia_);

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public geometry_msgs.msg.dds.Inertia getinertia()
   {
      return inertia_;
   }


}