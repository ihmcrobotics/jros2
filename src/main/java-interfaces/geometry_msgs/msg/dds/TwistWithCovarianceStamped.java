/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.
 *
 * Original .msg file content (geometry_msgs/TwistWithCovarianceStamped.msg):

# This represents an estimated twist with reference coordinate frame and timestamp.

std_msgs/Header header
TwistWithCovariance twist


 */
package geometry_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This represents an estimated twist with reference coordinate frame and timestamp.
*/
public class TwistWithCovarianceStamped implements ROS2Message<TwistWithCovarianceStamped>
{
   public static final java.lang.String name = "geometry_msgs::msg::dds_::TwistWithCovarianceStamped_";

   private final std_msgs.msg.dds.Header header_;
   private final geometry_msgs.msg.dds.TwistWithCovariance twist_;

   public TwistWithCovarianceStamped()
   {
      header_ = new std_msgs.msg.dds.Header();
      twist_ = new geometry_msgs.msg.dds.TwistWithCovariance();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += twist_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      twist_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      twist_.deserialize(buffer);

   }

   @Override
   public void set(TwistWithCovarianceStamped from)
   {
      header_.set(from.header_);
      twist_.set(from.twist_);

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public geometry_msgs.msg.dds.TwistWithCovariance gettwist()
   {
      return twist_;
   }


}