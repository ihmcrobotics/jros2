/*
 * This class was automatically generated by jros2.
 * Do not modify this file directly.

##################################################################################
This file was generated from the following content:
(geometry_msgs/TransformStamped.msg)
##################################################################################
   # This expresses a transform from coordinate frame header.frame_id
   # to the coordinate frame child_frame_id at the time of header.stamp
   #
   # This message is mostly used by the
   # <a href="https://index.ros.org/p/tf2/">tf2</a> package.
   # See its documentation for more information.
   #
   # The child_frame_id is necessary in addition to the frame_id
   # in the Header to communicate the full reference for the transform
   # in a self contained message.

   # The frame id in the header is used as the reference frame of this transform.
   std_msgs/Header header

   # The frame id of the child frame to which this transform points.
   string child_frame_id

   # Translation and rotation in 3-dimensions of child_frame_id from header.frame_id.
   Transform transform

##################################################################################

 */
package geometry_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This expresses a transform from coordinate frame header.frame_id
   to the coordinate frame child_frame_id at the time of header.stamp

   This message is mostly used by the
   <a href="https://index.ros.org/p/tf2/">tf2</a> package.
   See its documentation for more information.

   The child_frame_id is necessary in addition to the frame_id
   in the Header to communicate the full reference for the transform
   in a self contained message.
*/
public class TransformStamped implements ROS2Message<TransformStamped>
{
   public static final java.lang.String name = "geometry_msgs::msg::dds_::TransformStamped_";

   /**
      The frame id in the header is used as the reference frame of this transform.
   */
   private final std_msgs.msg.dds.Header header_;
   /**
      The frame id of the child frame to which this transform points.
   */
   private final StringBuilder child_frame_id_;
   /**
      Translation and rotation in 3-dimensions of child_frame_id from header.frame_id.
   */
   private final geometry_msgs.msg.dds.Transform transform_;

   public TransformStamped()
   {
      header_ = new std_msgs.msg.dds.Header();
      child_frame_id_ = new StringBuilder();
      transform_ = new geometry_msgs.msg.dds.Transform();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += (1 * child_frame_id_.length()) + CDRBuffer.alignment(currentAlignment, (1 * child_frame_id_.length())); // child_frame_id_
      currentAlignment += transform_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      buffer.writeString(child_frame_id_);
      transform_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      buffer.readString(child_frame_id_);
      transform_.deserialize(buffer);

   }

   @Override
   public void set(TransformStamped from)
   {
      header_.set(from.header_);
      child_frame_id_.delete(0, child_frame_id_.length());
      child_frame_id_.insert(0, from.child_frame_id_);
      transform_.set(from.transform_);

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public StringBuilder getchild_frame_id()
   {
      return child_frame_id_;
   }

   public geometry_msgs.msg.dds.Transform gettransform()
   {
      return transform_;
   }


}