// Targeted by JavaCPP version 1.5.11: DO NOT EDIT THIS FILE

package us.ihmc.fastdds;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.fastdds.global.fastdds.*;

@Name("std::vector<uint8_t>") @Properties(inherit = us.ihmc.fastdds.fastddsConfig.class)
public class fastddsjava_ByteVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public fastddsjava_ByteVector(Pointer p) { super(p); }
    public fastddsjava_ByteVector(byte value) { this(1); put(0, value); }
    public fastddsjava_ByteVector(byte ... array) { this(array.length); put(array); }
    public fastddsjava_ByteVector()       { allocate();  }
    public fastddsjava_ByteVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator =") @ByRef fastddsjava_ByteVector put(@ByRef fastddsjava_ByteVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    public byte front() { return get(0); }
    public byte back() { return get(size() - 1); }
    @Index(function = "at") public native @Cast("uint8_t") byte get(@Cast("size_t") long i);
    public native fastddsjava_ByteVector put(@Cast("size_t") long i, byte value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @Cast("uint8_t") byte value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator ++") @ByRef Iterator increment();
        public native @Name("operator ==") boolean equals(@ByRef Iterator it);
        public native @Name("operator *") @Cast("uint8_t") byte get();
    }

    public byte[] get() {
        byte[] array = new byte[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public byte pop_back() {
        long size = size();
        byte value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public fastddsjava_ByteVector push_back(byte value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public fastddsjava_ByteVector put(byte value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public fastddsjava_ByteVector put(byte ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

