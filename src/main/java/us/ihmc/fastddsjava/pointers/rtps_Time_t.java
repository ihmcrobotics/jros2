// Targeted by JavaCPP version 1.5.11: DO NOT EDIT THIS FILE

package us.ihmc.fastddsjava.pointers;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.fastddsjava.pointers.fastddsjava.*;


/**
 * Structure Time_t, used to describe times at RTPS protocol.
 * \ingroup COMMON_MODULE
 */
@Name("eprosima::fastdds::rtps::Time_t") @NoOffset @Properties(inherit = us.ihmc.fastddsjava.pointers.fastddsjavaInfoMapper.class)
public class rtps_Time_t extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public rtps_Time_t(Pointer p) { super(p); }


    /** Default constructor. Sets values to zero. */
    public rtps_Time_t() { super((Pointer)null); allocate(); }
    private native void allocate();

    /**
     * @param sec Seconds
     * @param frac Fraction of second
     */
    public rtps_Time_t(
                int sec,
                @Cast("uint32_t") int frac) { super((Pointer)null); allocate(sec, frac); }
    private native void allocate(
                int sec,
                @Cast("uint32_t") int frac);

    /**
     * @param sec Seconds. The fractional part is converted to nanoseconds.
     */
    public rtps_Time_t(
                @Cast("long double") double sec) { super((Pointer)null); allocate(sec); }
    private native void allocate(
                @Cast("long double") double sec);

    /**
     * @param time fastdds::dds::Time_t, aka. dds::Duration_t.
     */
    public rtps_Time_t(
                @Const @ByRef dds_Time_t time) { super((Pointer)null); allocate(time); }
    private native void allocate(
                @Const @ByRef dds_Time_t time);

    /**
     *  Returns stored time as nanoseconds (including seconds)
     */
    public native @Cast("int64_t") long to_ns();

    /**
     *  @param nanosecs Stores given time as nanoseconds (including seconds)
     */
    public native void from_ns(
                @Cast("int64_t") long nanosecs);

    /**
     * Retrieve the seconds field.
     */

    /**
     * Retrieve the seconds field by ref.
     */
    public native @ByRef IntPointer seconds();

    /**
     * Sets seconds field.
     */
    public native void seconds(
                int sec);

    /**
     * Retrieve the nanosec field.
     */
    public native @Cast("uint32_t") @Function int nanosec();

    /**
     * Sets nanoseconds field and updates the fraction.
     */
    public native @Function void nanosec(
                @Cast("uint32_t") int nanos);

    /**
     * Retrieve the fraction field.
     */

    /**
     * Retrieve the fraction field by ref.
     */
    public native @Cast("uint32_t*") @ByRef IntPointer fraction();

    /**
     * Sets fraction field and updates the nanoseconds.
     */
    public native void fraction(
                @Cast("uint32_t") int frac);

    public native @ByVal dds_Time_t to_duration_t();

    public native void from_duration_t(
                @Const @ByRef dds_Time_t duration);

    /**
     * Fills a Time_t struct with a representation of the current time.
     *
     * @param ret Reference to the structure to be filled in.
     */
    public static native void now(
                @ByRef rtps_Time_t ret);
}
