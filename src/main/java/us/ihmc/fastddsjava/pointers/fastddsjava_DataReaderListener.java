// Targeted by JavaCPP version 1.5.11: DO NOT EDIT THIS FILE

package us.ihmc.fastddsjava.pointers;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.fastddsjava.pointers.fastddsjava.*;


@NoOffset @Properties(inherit = us.ihmc.fastddsjava.pointers.fastddsjavaInfoMapper.class)
public class fastddsjava_DataReaderListener extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public fastddsjava_DataReaderListener() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public fastddsjava_DataReaderListener(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public fastddsjava_DataReaderListener(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public fastddsjava_DataReaderListener position(long position) {
        return (fastddsjava_DataReaderListener)super.position(position);
    }
    @Override public fastddsjava_DataReaderListener getPointer(long i) {
        return new fastddsjava_DataReaderListener((Pointer)this).offsetAddress(i);
    }

    // Do not accept anything in the callback functions so that in JNI, we do not create new Pointer objects, which generate garbage

    public native void set_on_data_available_callback(@ByVal fastddsjava_OnDataCallback callback);

    public native void set_on_subscription_callback(@ByVal fastddsjava_OnSubscriptionCallback callback);
}
