// Targeted by JavaCPP version 1.5.11: DO NOT EDIT THIS FILE

package us.ihmc.fastddsjava.pointers;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.fastddsjava.pointers.fastddsjava.*;


/**
 * \brief SampleInfo is the information that accompanies each sample that is ‘read’ or ‘taken.’
 */
@Namespace("eprosima::fastdds::dds") @Properties(inherit = us.ihmc.fastddsjava.pointers.fastddsjavaInfoMapper.class)
public class SampleInfo extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SampleInfo() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SampleInfo(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SampleInfo(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SampleInfo position(long position) {
        return (SampleInfo)super.position(position);
    }
    @Override public SampleInfo getPointer(long i) {
        return new SampleInfo((Pointer)this).offsetAddress(i);
    }

    /** indicates whether or not the corresponding data sample has already been read */
    public native @Cast("eprosima::fastdds::dds::SampleStateKind") short sample_state(); public native SampleInfo sample_state(short setter);

    /** indicates whether the DataReader has already seen samples for the most-current generation of the related instance. */
    public native @Cast("eprosima::fastdds::dds::ViewStateKind") short view_state(); public native SampleInfo view_state(short setter);

    /** indicates whether the instance is currently in existence or, if it has been disposed, the reason why it was disposed. */
    public native @Cast("eprosima::fastdds::dds::InstanceStateKind") short instance_state(); public native SampleInfo instance_state(short setter);

    /** number of times the instance had become alive after it was disposed */
    public native int disposed_generation_count(); public native SampleInfo disposed_generation_count(int setter);

    /** number of times the instance had become alive after it was disposed because no writers */
    public native int no_writers_generation_count(); public native SampleInfo no_writers_generation_count(int setter);

    /** number of samples related to the same instance that follow in the collection */
    public native int sample_rank(); public native SampleInfo sample_rank(int setter);

    /** the generation difference between the time the sample was received, and the time the most recent sample in the collection was received. */
    public native int generation_rank(); public native SampleInfo generation_rank(int setter);

    /** the generation difference between the time the sample was received, and the time the most recent sample was received.
     *  The most recent sample used for the calculation may or may not be in the returned collection */
    public native int absolute_generation_rank(); public native SampleInfo absolute_generation_rank(int setter);

    /** time provided by the DataWriter when the sample was written */
    public native @ByRef rtps_Time_t source_timestamp(); public native SampleInfo source_timestamp(rtps_Time_t setter);

    /** time provided by the DataReader when the sample was added to its history */
    public native @ByRef rtps_Time_t reception_timestamp(); public native SampleInfo reception_timestamp(rtps_Time_t setter);

    /** identifies locally the corresponding instance */

    /** identifies locally the DataWriter that modified the instance
     * 
     *  Is the same InstanceHandle_t that is returned by the operation get_matched_publications on the DataReader */

    /** whether the DataSample contains data or is only used to communicate of a change in the instance */
    public native @Cast("bool") boolean valid_data(); public native SampleInfo valid_data(boolean setter);

    /**Sample Identity (Extension for RPC) */

    /**Related Sample Identity (Extension for RPC) */

}
