// Targeted by JavaCPP version 1.5.11: DO NOT EDIT THIS FILE

package us.ihmc.fastddsjava.pointers;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.fastddsjava.pointers.fastddsjava.*;


/**
 * Structure Time_t, used to describe times at a DDS level.
 */
@Name("eprosima::fastdds::dds::Time_t") @NoOffset @Properties(inherit = us.ihmc.fastddsjava.pointers.fastddsjavaInfoMapper.class)
public class dds_Time_t extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public dds_Time_t(Pointer p) { super(p); }

    @MemberGetter public static native int INFINITE_SECONDS();
    public static final int INFINITE_SECONDS = INFINITE_SECONDS();
    @MemberGetter public static native @Cast("const uint32_t") int INFINITE_NANOSECONDS();
    public static final int INFINITE_NANOSECONDS = INFINITE_NANOSECONDS();

    public native int seconds(); public native dds_Time_t seconds(int setter);
    public native @Cast("uint32_t") int nanosec(); public native dds_Time_t nanosec(int setter);

    /** Default constructor. Sets values to zero. */
    public dds_Time_t() { super((Pointer)null); allocate(); }
    private native void allocate();

    /**
     * @param sec Seconds
     * @param nsec Nanoseconds
     */
    public dds_Time_t(
                int sec,
                @Cast("uint32_t") int nsec) { super((Pointer)null); allocate(sec, nsec); }
    private native void allocate(
                int sec,
                @Cast("uint32_t") int nsec);

    /**
     * @param sec Seconds. The fractional part is converted to nanoseconds.
     */
    public dds_Time_t(
                @Cast("long double") double sec) { super((Pointer)null); allocate(sec); }
    private native void allocate(
                @Cast("long double") double sec);

    public native @Function void fraction(
                @Cast("uint32_t") int frac);

    public native @Cast("uint32_t") @Function int fraction();

    /**
     *  Returns stored time as nanoseconds (including seconds)
     */
    public native @Cast("int64_t") long to_ns();

    public native @Cast("bool") @NoException(true) boolean is_infinite();

    /**
     * Fills a Time_t struct with a representation of the current time.
     *
     * @param ret Reference to the structure to be filled in.
     */
    public static native void now(
                @ByRef dds_Time_t ret);

    public static native @Cast("const bool") @NoException(true) boolean is_infinite(
                @Const @ByRef dds_Time_t t);

}
