/*
 * This class was automatically generated by jros2
 */
package sensor_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   Navigation Satellite fix for any Global Navigation Satellite System

   Specified using the WGS 84 reference ellipsoid
*/
public class NavSatFix implements ROS2Message<NavSatFix>
{
   public static final java.lang.String name = "sensor_msgs::msg::dds_::NavSatFix_";

   /**
      header.stamp specifies the ROS time for this measurement (the
      corresponding satellite time may be reported using the
      sensor_msgs/TimeReference message).

      header.frame_id is the frame of reference reported by the satellite
      receiver, usually the location of the antenna.  This is a
      Euclidean frame relative to the vehicle, not a reference
      ellipsoid.
   */
   private final std_msgs.msg.dds.Header header_;
   /**
      Satellite fix status information.
   */
   private final sensor_msgs.msg.dds.NavSatStatus status_;
   /**
      Latitude [degrees]. Positive is north of equator; negative is south.
   */
   private double latitude_;
   /**
      Longitude [degrees]. Positive is east of prime meridian; negative is west.
   */
   private double longitude_;
   /**
      Altitude [m]. Positive is above the WGS 84 ellipsoid
      (quiet NaN if no altitude is available).
   */
   private double altitude_;
   /**
      Position covariance [m^2] defined relative to a tangential plane
      through the reported position. The components are East, North, and
      Up (ENU), in row-major order.

      Beware: this coordinate system exhibits singularities at the poles.
   */
   private final double[] position_covariance_;
   public static final byte COVARIANCE_TYPE_UNKNOWN = 0;
   public static final byte COVARIANCE_TYPE_APPROXIMATED = 1;
   public static final byte COVARIANCE_TYPE_DIAGONAL_KNOWN = 2;
   public static final byte COVARIANCE_TYPE_KNOWN = 3;
   private byte position_covariance_type_;

   public NavSatFix()
   {
      header_ = new std_msgs.msg.dds.Header();
      status_ = new sensor_msgs.msg.dds.NavSatStatus();
      position_covariance_ = new double[9];

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += header_.calculateSizeBytes(currentAlignment);
      currentAlignment += status_.calculateSizeBytes(currentAlignment);
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // latitude_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // longitude_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // altitude_
      currentAlignment += (9 * 8) + CDRBuffer.alignment(currentAlignment, (9 * 8)); // position_covariance_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // position_covariance_type_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      header_.serialize(buffer);
      status_.serialize(buffer);
      buffer.writeDouble(latitude_);
      buffer.writeDouble(longitude_);
      buffer.writeDouble(altitude_);
      for (int i = 0; i < position_covariance_.length; ++i)
      {
         buffer.writeDouble(position_covariance_[i]);
      }
      buffer.writeByte(position_covariance_type_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      header_.deserialize(buffer);
      status_.deserialize(buffer);
      latitude_ = buffer.readDouble();
      longitude_ = buffer.readDouble();
      altitude_ = buffer.readDouble();
      for (int i = 0; i < position_covariance_.length; ++i)
      {
      position_covariance_[i] = buffer.readDouble();
      }
      position_covariance_type_ = buffer.readByte();

   }

   @Override
   public void set(NavSatFix from)
   {
      header_.set(from.header_);
      status_.set(from.status_);
      latitude_ = from.latitude_;
      longitude_ = from.longitude_;
      altitude_ = from.altitude_;
      for (int i = 0; i < position_covariance_.length; ++i)
      {
         position_covariance_[i] = from.position_covariance_[i];
      }
      position_covariance_type_ = from.position_covariance_type_;

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public sensor_msgs.msg.dds.NavSatStatus getstatus()
   {
      return status_;
   }

   public double getlatitude()
   {
      return latitude_;
   }

   public void setlatitude(double latitude_)
   {
      this.latitude_ = latitude_;
   }

   public double getlongitude()
   {
      return longitude_;
   }

   public void setlongitude(double longitude_)
   {
      this.longitude_ = longitude_;
   }

   public double getaltitude()
   {
      return altitude_;
   }

   public void setaltitude(double altitude_)
   {
      this.altitude_ = altitude_;
   }

   public double[] getposition_covariance()
   {
      return position_covariance_;
   }

   public byte getposition_covariance_type()
   {
      return position_covariance_type_;
   }

   public void setposition_covariance_type(byte position_covariance_type_)
   {
      this.position_covariance_type_ = position_covariance_type_;
   }


}