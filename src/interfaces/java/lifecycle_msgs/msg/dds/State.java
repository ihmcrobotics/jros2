/*
 * This class was automatically generated by jros2
 */
package lifecycle_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   These are the primary states. State changes can only be requested when the
   node is in one of these states.
*/
public class State implements ROS2Message<State>
{
   public static final java.lang.String name = "lifecycle_msgs::msg::dds_::State_";

   /**
      Indicates state has not yet been set.
   */
   public static final byte PRIMARY_STATE_UNKNOWN = 0;
   /**
      This is the life cycle state the node is in immediately after being
      instantiated.
   */
   public static final byte PRIMARY_STATE_UNCONFIGURED = 1;
   /**
      This state represents a node that is not currently performing any processing.
   */
   public static final byte PRIMARY_STATE_INACTIVE = 2;
   /**
      This is the main state of the node's life cycle. While in this state, the node
      performs any processing, responds to service requests, reads and processes
      data, produces output, etc.
   */
   public static final byte PRIMARY_STATE_ACTIVE = 3;
   /**
      The finalized state is the state in which the node ends immediately before
      being destroyed.
   */
   public static final byte PRIMARY_STATE_FINALIZED = 4;
   /**
      In this transition state the node's onConfigure callback will be called to
      allow the node to load its configuration and conduct any required setup.
   */
   public static final byte TRANSITION_STATE_CONFIGURING = 10;
   /**
      In this transition state the node's callback onCleanup will be called to clear
      all state and return the node to a functionally equivalent state as when
      first created.
   */
   public static final byte TRANSITION_STATE_CLEANINGUP = 11;
   /**
      In this transition state the callback onShutdown will be executed to do any
      cleanup necessary before destruction.
   */
   public static final byte TRANSITION_STATE_SHUTTINGDOWN = 12;
   /**
      In this transition state the callback onActivate will be executed to do any
      final preparations to start executing.
   */
   public static final byte TRANSITION_STATE_ACTIVATING = 13;
   /**
      In this transition state the callback onDeactivate will be executed to do any
      cleanup to start executing, and reverse the onActivate changes.
   */
   public static final byte TRANSITION_STATE_DEACTIVATING = 14;
   /**
      This transition state is where any error may be cleaned up.
   */
   public static final byte TRANSITION_STATE_ERRORPROCESSING = 15;
   /**
      The state id value from the above definitions.
   */
   private byte id_;
   /**
      A text label of the state.
   */
   private final StringBuilder label_;

   public State()
   {
      label_ = new StringBuilder();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // id_
      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // label_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeByte(id_);
      buffer.writeString(label_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      id_ = buffer.readByte();
      buffer.readString(label_);

   }

   @Override
   public void set(State from)
   {
      id_ = from.id_;
      label_.delete(0, label_.length());
      label_.insert(0, from.label_);

   }

   public byte getid()
   {
      return id_;
   }

   public void setid(byte id_)
   {
      this.id_ = id_;
   }

   public StringBuilder getlabel()
   {
      return label_;
   }


}