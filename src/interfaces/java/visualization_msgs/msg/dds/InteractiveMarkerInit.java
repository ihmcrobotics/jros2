/*
 * This class was automatically generated by jros2
 */
package visualization_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

public class InteractiveMarkerInit implements ROS2Message<InteractiveMarkerInit>
{
   public static final java.lang.String name = "visualization_msgs::msg::dds_::InteractiveMarkerInit_";

   /**
      Identifying string. Must be unique in the topic namespace
      that this server works on.
   */
   private final StringBuilder server_id_;
   /**
      Sequence number.
      The client will use this to detect if it has missed a subsequent
      update.  Every update message will have the same sequence number as
      an init message.  Clients will likely want to unsubscribe from the
      init topic after a successful initialization to avoid receiving
      duplicate data.
   */
   private long seq_num_;
   /**
      All markers.
   */
   private final IDLObjectSequence<visualization_msgs.msg.dds.InteractiveMarker> markers_;

   public InteractiveMarkerInit()
   {
      server_id_ = new StringBuilder();
      markers_ = new IDLObjectSequence<visualization_msgs.msg.dds.InteractiveMarker>(visualization_msgs.msg.dds.InteractiveMarker.class);

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // server_id_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // seq_num_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeString(server_id_);
      buffer.writeLong(seq_num_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      buffer.readString(server_id_);
      seq_num_ = buffer.readLong();

   }

   @Override
   public void set(InteractiveMarkerInit from)
   {
      server_id_.delete(0, server_id_.length());
      server_id_.insert(0, from.server_id_);
      seq_num_ = from.seq_num_;

   }

   public StringBuilder getserver_id()
   {
      return server_id_;
   }

   public long getseq_num()
   {
      return seq_num_;
   }

   public void setseq_num(long seq_num_)
   {
      this.seq_num_ = seq_num_;
   }

   public IDLObjectSequence<visualization_msgs.msg.dds.InteractiveMarker> getmarkers()
   {
      return markers_;
   }


}