/*
 * This class was automatically generated by jros2
 */
package visualization_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

public class ImageMarker implements ROS2Message<ImageMarker>
{
   public static final java.lang.String name = "visualization_msgs::msg::dds_::ImageMarker_";

   public static final int CIRCLE = 0;
   public static final int LINE_STRIP = 1;
   public static final int LINE_LIST = 2;
   public static final int POLYGON = 3;
   public static final int POINTS = 4;
   public static final int ADD = 0;
   public static final int REMOVE = 1;
   private final std_msgs.msg.dds.Header header_;
   /**
      Namespace which is used with the id to form a unique id.
   */
   private StringBuilder ns_;
   /**
      Unique id within the namespace.
   */
   private int id_;
   /**
      One of the above types, e.g. CIRCLE, LINE_STRIP, etc.
   */
   private int type_;
   /**
      Either ADD or REMOVE.
   */
   private int action_;
   /**
      Two-dimensional coordinate position, in pixel-coordinates.
   */
   private final geometry_msgs.msg.dds.Point position_;
   /**
      The scale of the object, e.g. the diameter for a CIRCLE.
   */
   private float scale_;
   /**
      The outline color of the marker.
   */
   private final std_msgs.msg.dds.ColorRGBA outline_color_;
   /**
      Whether or not to fill in the shape with color.
   */
   private byte filled_;
   /**
      Fill color; in the range: [0.0-1.0]
   */
   private final std_msgs.msg.dds.ColorRGBA fill_color_;
   /**
      How long the object should last before being automatically deleted.
      0 indicates forever.
   */
   private final builtin_interfaces.msg.dds.Duration lifetime_;
   /**
      Coordinates in 2D in pixel coords. Used for LINE_STRIP, LINE_LIST, POINTS, etc.
   */
   private final IDLObjectSequence<geometry_msgs.msg.dds.Point> points_;
   /**
      The color for each line, point, etc. in the points field.
   */
   private final IDLObjectSequence<std_msgs.msg.dds.ColorRGBA> outline_colors_;

   public ImageMarker()
   {
      header_ = new std_msgs.msg.dds.Header();
      ns_ = new StringBuilder();
      position_ = new geometry_msgs.msg.dds.Point();
      outline_color_ = new std_msgs.msg.dds.ColorRGBA();
      fill_color_ = new std_msgs.msg.dds.ColorRGBA();
      lifetime_ = new builtin_interfaces.msg.dds.Duration();
      points_ = new IDLObjectSequence<geometry_msgs.msg.dds.Point>(geometry_msgs.msg.dds.Point.class);
      outline_colors_ = new IDLObjectSequence<std_msgs.msg.dds.ColorRGBA>(std_msgs.msg.dds.ColorRGBA.class);

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += -1 + CDRBuffer.alignment(currentAlignment, -1); // ns_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // id_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // type_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // action_
      currentAlignment += 4 + CDRBuffer.alignment(currentAlignment, 4); // scale_
      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // filled_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeString(ns_);
      buffer.writeInt(id_);
      buffer.writeInt(type_);
      buffer.writeInt(action_);
      buffer.writeFloat(scale_);
      buffer.writeByte(filled_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      buffer.readString(ns_);
      id_ = buffer.readInt();
      type_ = buffer.readInt();
      action_ = buffer.readInt();
      scale_ = buffer.readFloat();
      filled_ = buffer.readByte();

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(ImageMarker from)
   {
      ns_ = from.ns_;
      id_ = from.id_;
      type_ = from.type_;
      action_ = from.action_;
      scale_ = from.scale_;
      filled_ = from.filled_;

   }

   public std_msgs.msg.dds.Header getheader()
   {
      return header_;
   }

   public StringBuilder getns()
   {
      return ns_;
   }

   public void setns(StringBuilder ns_)
   {
      this.ns_ = ns_;
   }

   public int getid()
   {
      return id_;
   }

   public void setid(int id_)
   {
      this.id_ = id_;
   }

   public int gettype()
   {
      return type_;
   }

   public void settype(int type_)
   {
      this.type_ = type_;
   }

   public int getaction()
   {
      return action_;
   }

   public void setaction(int action_)
   {
      this.action_ = action_;
   }

   public geometry_msgs.msg.dds.Point getposition()
   {
      return position_;
   }

   public float getscale()
   {
      return scale_;
   }

   public void setscale(float scale_)
   {
      this.scale_ = scale_;
   }

   public std_msgs.msg.dds.ColorRGBA getoutline_color()
   {
      return outline_color_;
   }

   public byte getfilled()
   {
      return filled_;
   }

   public void setfilled(byte filled_)
   {
      this.filled_ = filled_;
   }

   public std_msgs.msg.dds.ColorRGBA getfill_color()
   {
      return fill_color_;
   }

   public builtin_interfaces.msg.dds.Duration getlifetime()
   {
      return lifetime_;
   }

   public IDLObjectSequence<geometry_msgs.msg.dds.Point> getpoints()
   {
      return points_;
   }

   public IDLObjectSequence<std_msgs.msg.dds.ColorRGBA> getoutline_colors()
   {
      return outline_colors_;
   }


}