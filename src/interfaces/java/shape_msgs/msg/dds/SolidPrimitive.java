/*
 * This class was automatically generated by jros2
 */
package shape_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   Defines box, sphere, cylinder, cone and prism.
   All shapes are defined to have their bounding boxes centered around 0,0,0.
*/
public class SolidPrimitive implements ROS2Message<SolidPrimitive>
{
   public static final java.lang.String name = "shape_msgs::msg::dds_::SolidPrimitive_";

   public static final byte BOX = 1;
   public static final byte SPHERE = 2;
   public static final byte CYLINDER = 3;
   public static final byte CONE = 4;
   public static final byte PRISM = 5;
   /**
      The type of the shape
   */
   private byte type_;
   /**
      The dimensions of the shape
   */
   private final IDLDoubleSequence dimensions_;
   /**
      For type BOX, the X, Y, and Z dimensions are the length of the corresponding sides of the box.
   */
   public static final byte BOX_X = 0;
   public static final byte BOX_Y = 1;
   public static final byte BOX_Z = 2;
   /**
      For the SPHERE type, only one component is used, and it gives the radius of the sphere.
   */
   public static final byte SPHERE_RADIUS = 0;
   public static final byte CYLINDER_HEIGHT = 0;
   public static final byte CYLINDER_RADIUS = 1;
   public static final byte CONE_HEIGHT = 0;
   public static final byte CONE_RADIUS = 1;
   public static final byte PRISM_HEIGHT = 0;
   private final geometry_msgs.msg.dds.Polygon polygon_;

   public SolidPrimitive()
   {
      dimensions_ = new IDLDoubleSequence();
      polygon_ = new geometry_msgs.msg.dds.Polygon();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 1 + CDRBuffer.alignment(currentAlignment, 1); // type_
      currentAlignment += dimensions_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeByte(type_);
      dimensions_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      type_ = buffer.readByte();
      dimensions_.deserialize(buffer);

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(SolidPrimitive from)
   {
      type_ = from.type_;
      dimensions_.set(from.dimensions_);

   }

   public byte gettype()
   {
      return type_;
   }

   public void settype(byte type_)
   {
      this.type_ = type_;
   }

   public IDLDoubleSequence getdimensions()
   {
      return dimensions_;
   }

   public geometry_msgs.msg.dds.Polygon getpolygon()
   {
      return polygon_;
   }


}