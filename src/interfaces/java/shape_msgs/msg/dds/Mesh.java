/*
 * This class was automatically generated by jros2
 */
package shape_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   Definition of a mesh.
*/
public class Mesh implements ROS2Message<Mesh>
{
   public static final java.lang.String name = "shape_msgs::msg::dds_::Mesh_";

   /**
      List of triangles; the index values refer to positions in vertices[].
   */
   private final IDLObjectSequence<shape_msgs.msg.dds.MeshTriangle> triangles_;
   /**
      The actual vertices that make up the mesh.
   */
   private final IDLObjectSequence<geometry_msgs.msg.dds.Point> vertices_;

   public Mesh()
   {
      triangles_ = new IDLObjectSequence<shape_msgs.msg.dds.MeshTriangle>(shape_msgs.msg.dds.MeshTriangle.class);
      vertices_ = new IDLObjectSequence<geometry_msgs.msg.dds.Point>(geometry_msgs.msg.dds.Point.class);

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += triangles_.calculateSizeBytes(currentAlignment);
      currentAlignment += vertices_.calculateSizeBytes(currentAlignment);

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      triangles_.serialize(buffer);
      vertices_.serialize(buffer);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      triangles_.deserialize(buffer);
      vertices_.deserialize(buffer);

   }

   @Override
   public void set(Mesh from)
   {
      triangles_.set(from.triangles_);
      vertices_.set(from.vertices_);

   }

   public IDLObjectSequence<shape_msgs.msg.dds.MeshTriangle> gettriangles()
   {
      return triangles_;
   }

   public IDLObjectSequence<geometry_msgs.msg.dds.Point> getvertices()
   {
      return vertices_;
   }


}