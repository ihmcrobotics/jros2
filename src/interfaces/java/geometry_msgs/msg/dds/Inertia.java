/*
 * This class was automatically generated by jros2
 */
package geometry_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

public class Inertia implements ROS2Message<Inertia>
{
   public static final java.lang.String name = "geometry_msgs::msg::dds_::Inertia_";

   /**
      Mass [kg]
   */
   private double m_;
   /**
      Center of mass [m]
   */
   private final geometry_msgs.msg.dds.Vector3 com_;
   /**
      Inertia Tensor [kg-m^2]
      | ixx ixy ixz |
      I = | ixy iyy iyz |
      | ixz iyz izz |
   */
   private double ixx_;
   private double ixy_;
   private double ixz_;
   private double iyy_;
   private double iyz_;
   private double izz_;

   public Inertia()
   {
      com_ = new geometry_msgs.msg.dds.Vector3();

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // m_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // ixx_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // ixy_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // ixz_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // iyy_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // iyz_
      currentAlignment += 8 + CDRBuffer.alignment(currentAlignment, 8); // izz_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      buffer.writeDouble(m_);
      buffer.writeDouble(ixx_);
      buffer.writeDouble(ixy_);
      buffer.writeDouble(ixz_);
      buffer.writeDouble(iyy_);
      buffer.writeDouble(iyz_);
      buffer.writeDouble(izz_);

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      m_ = buffer.readDouble();
      ixx_ = buffer.readDouble();
      ixy_ = buffer.readDouble();
      ixz_ = buffer.readDouble();
      iyy_ = buffer.readDouble();
      iyz_ = buffer.readDouble();
      izz_ = buffer.readDouble();

   }

   @Override
   public void set(Inertia from)
   {
      m_ = from.m_;
      ixx_ = from.ixx_;
      ixy_ = from.ixy_;
      ixz_ = from.ixz_;
      iyy_ = from.iyy_;
      iyz_ = from.iyz_;
      izz_ = from.izz_;

   }

   public double getm()
   {
      return m_;
   }

   public void setm(double m_)
   {
      this.m_ = m_;
   }

   public geometry_msgs.msg.dds.Vector3 getcom()
   {
      return com_;
   }

   public double getixx()
   {
      return ixx_;
   }

   public void setixx(double ixx_)
   {
      this.ixx_ = ixx_;
   }

   public double getixy()
   {
      return ixy_;
   }

   public void setixy(double ixy_)
   {
      this.ixy_ = ixy_;
   }

   public double getixz()
   {
      return ixz_;
   }

   public void setixz(double ixz_)
   {
      this.ixz_ = ixz_;
   }

   public double getiyy()
   {
      return iyy_;
   }

   public void setiyy(double iyy_)
   {
      this.iyy_ = iyy_;
   }

   public double getiyz()
   {
      return iyz_;
   }

   public void setiyz(double iyz_)
   {
      this.iyz_ = iyz_;
   }

   public double getizz()
   {
      return izz_;
   }

   public void setizz(double izz_)
   {
      this.izz_ = izz_;
   }


}