/*
 * This class was automatically generated by jros2
 */
package geometry_msgs.msg.dds;

import us.ihmc.fastddsjava.cdr.CDRBuffer;
import us.ihmc.fastddsjava.cdr.idl.*;
import us.ihmc.jros2.ROS2Message;

/**
   This represents a pose in free space with uncertainty.
*/
public class PoseWithCovariance implements ROS2Message<PoseWithCovariance>
{
   public static final java.lang.String name = "geometry_msgs::msg::dds_::PoseWithCovariance_";

   private final geometry_msgs.msg.dds.Pose pose_;
   /**
      Row-major representation of the 6x6 covariance matrix
      The orientation parameters use a fixed-axis representation.
      In order, the parameters are:
      (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
   */
   private final double[] covariance_;

   public PoseWithCovariance()
   {
      pose_ = new geometry_msgs.msg.dds.Pose();
      covariance_ = new double[36];

   }

   @Override
   public int calculateSizeBytes(int currentAlignment)
   {
      int initialAlignment = currentAlignment;

      currentAlignment += (36 * 8) + CDRBuffer.alignment(currentAlignment, (36 * 8)); // covariance_

      return currentAlignment - initialAlignment;
   }

   @Override
   public void serialize(CDRBuffer buffer)
   {
      for (int i = 0; i < covariance_.length; ++i)
      {
         buffer.writeDouble(covariance_[i]);
      }

   }

   @Override
   public void deserialize(CDRBuffer buffer)
   {
      for (int i = 0; i < covariance_.length; ++i)
      {
      covariance_[i] = buffer.readDouble();
      }

   }

   @Override
   public java.lang.String getName()
   {
      return name;
   }

   @Override
   public void set(PoseWithCovariance from)
   {
      for (int i = 0; i < covariance_.length; ++i)
      {
         covariance_[i] = from.covariance_[i];
      }

   }

   public geometry_msgs.msg.dds.Pose getpose()
   {
      return pose_;
   }

   public double[] getcovariance()
   {
      return covariance_;
   }


}